
   <rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
     <channel>
       <title>Posts on Around The Computer</title>
       <link>https://negli0.github.io/posts/</link>
       <description>Recent content in Posts on Around The Computer</description>
       <generator>Hugo -- gohugo.io</generator>
       <copyright>Copyright &amp;copy; 2018 - negli0</copyright>
       <lastBuildDate>Mon, 28 Oct 2019 09:23:48 +0900</lastBuildDate>
       
           <atom:link href="https://negli0.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
       
       
       <item>
         <title>日本 P4 ユーザ会 2019 参加記（まとめや感想など）</title>
         <link>https://negli0.github.io/posts/p4-user-jp/</link>
         <pubDate>Mon, 28 Oct 2019 09:23:48 +0900</pubDate>
         
         <guid>https://negli0.github.io/posts/p4-user-jp/</guid>
         <description>&lt;h2 id=&#34;日本-p4-ユーザ会とは&#34;&gt;日本 P4 ユーザ会とは&lt;/h2&gt;
&lt;p&gt;ホームページによれば，以下のとおりです．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://p4users.org&#34;&gt;日本 P4 ユーザ会&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://p4.org&#34;&gt;P4 Lang&lt;/a&gt; について日本語で語るグループ．
P4 関連のセミナー情報やカンファレンス情報及び技術情報を共有する．&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;インタラクティブな議論は Slack 上でされています．&lt;/p&gt;
&lt;p&gt;10/11(Fri) に「&lt;a href=&#34;https://p4users.org/2019/07/16/event2019/&#34;&gt;日本 P4 ユーザ会 2019&lt;/a&gt;」
が開催され，私にしては珍しく聴講のみのイベント参加をしてまいりました．
一緒に行った友人との議論もあって知見が溜まった気がするので吐き出します．&lt;/p&gt;
&lt;h5 id=&#34;本エントリでは-p4-についての詳細は省きます&#34;&gt;※本エントリでは P4 についての詳細は省きます&lt;/h5&gt;
&lt;h3 id=&#34;p4-と私&#34;&gt;P4 と私&lt;/h3&gt;
&lt;p&gt;存在自体は論文&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; を読んで知ってから久しいものですが，具体的に動かしたことはないです．
Software Defined Network（SDN）の文脈で言われる，いわゆる &amp;ldquo;Data-Plane(D-Plane) Programmability&amp;rdquo;
を実現するための Domain Specific Language（DSL）です．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sigcomm.org/sites/default/files/ccr/papers/2014/July/0000000-0000004.pdf&#34;&gt;論文PDF&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;D-Plane Programmability といえば，私は 2017 年に某所で
OpenFlow&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;（Controller は Ryu）， Docker， Open vSwitch を組み合わせて軽量な
NFV box を作ってデプロイして面倒を見るという作業に参加していました．手前味噌
ですが，運用成果をまとめた論文&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; を研究会に出してます．&lt;/p&gt;
&lt;p&gt;OpenFlow&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; ではヘッダフィールドを規定してパケットプロセッシングする一方，
P4 はビットストリームとしてパケットプロセッシングするのだな，ぐらいのイメージを
持っていました．加えて P4 は技術的な特徴からエコシステムまで含めて，OpenFlow
でうまく行かなかった部分を克服しようとしているように思っておりました．&lt;/p&gt;
&lt;p&gt;ここから当日得た内容を私なりにまとめてみます．資料は HP 上で公開されています．
P4 の基本的な仕組みについて触れた資料もあるため全部読めば知識は手に入ります．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://p4users.org/2019/07/16/event2019/&#34;&gt;【資料公開】日本 P4 ユーザ会 2019 開催のお知らせ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;-なお発表内容すべてには触れませんが特に意図はありません&#34;&gt;※ なお発表内容すべてには触れませんが特に意図はありません&lt;/h5&gt;
&lt;hr&gt;
&lt;p&gt;感想は以下のようにまとめられます．&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Stratum で P4 プログラムを扱いやすく&lt;/li&gt;
&lt;li&gt;&amp;lsquo;fully-programmable&amp;rsquo; のつらさと品質保証&lt;/li&gt;
&lt;li&gt;INT 大流行&lt;/li&gt;
&lt;li&gt;研究の観点&lt;/li&gt;
&lt;li&gt;P4 に限らずエコシステムを回すことが大切&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;順番に書いていきます．&lt;/p&gt;
&lt;h3 id=&#34;stratum-で-p4-プログラムを扱いやすく&#34;&gt;Stratum で P4 プログラムを扱いやすく&lt;/h3&gt;
&lt;p&gt;実際に P4 を使ったある開発経験者から聞くところによると，Barefoot の SDK を
直接使うのはけっこう辛いのだそう．加えて私のように手元でちょっとした実験をしたい
人からするとわざわざ P4 対応の ASIC を購入するのはハードルが高いです．&lt;/p&gt;
&lt;p&gt;Stratum は ONF や Google からオープンソースとして9月に公開された，いわゆる NOS です．
P4 対応 ASIC だけでなく，FPGA や NPU，CPU も P4 の実行プラットフォーム
として扱うことができます．P4 ネイティブ非対応のプラットフォームにも P4 プログラム
をデプロイして使えるのは非常にありがたいです．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/stratum/stratum&#34;&gt;Stratum - Enabling the era of next-generation SDN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;各プラットフォームごとの主なターゲットは以下のとおりです．&lt;/p&gt;
&lt;h4 id=&#34;-ebiken-さんのスライド参照-pdfhttpsp4usersfileswordpresscom201910p4ug-japan-toyota-ebisawa-20191011pdf&#34;&gt;※ ebiken さんのスライド参照: &lt;a href=&#34;https://p4users.files.wordpress.com/2019/10/p4ug-japan-toyota-ebisawa-20191011.pdf&#34;&gt;PDF&lt;/a&gt;&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;プラットフォーム&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;ターゲット&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;処理性能&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;コンパイラ&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ASIC&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Barefoot&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;xx Tbps&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;P4 Studio&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;FPGA&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Xilinx, Intel&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;xxx Gbps&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;P4-SDNet, Netcope NP4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;NPU&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Netronome&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;xx Gbps&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Agilio P4C SDK&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;CPU&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;BMv2, eBPF&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;x Gbps&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;p4lang/p4c&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;P4 を手元でサクッと試すなら Stratum + BMv2 が良さそうです．
&amp;ldquo;PoC 程度なら&amp;rdquo; 同じ P4 ファイルをマルチプラットフォームで使い回せます．
それがP4の意義のひとつですからね．&lt;/p&gt;
&lt;p&gt;ASIC は高スループットですが P4 で表現可能なことの他にできることが限られます．
例えば最新の P4_16 の仕様では P4 には除算命令が無いらしいです．
FPGA では，P4 で表現できないロジックは HDL でどうとでもなりますが，ロジックを変更
するたびに合成が必要なので規模に寄ってはアジリティは低いのかもしれません．
NPU ですが，私は使ったことがありません．おそらくだいぶソフトウェア寄りな表現が
可能になると思います．価格もそこまで高くないそう(7万円とか)です．&lt;/p&gt;
&lt;p&gt;Stratum とは別に，
最近だと P4 で D-Plane ロジックを書いてコンパイルすると，それ専用の CLI も一緒に
生成されるらしい(要出典)ので，C-Plane が CLI
で良ければコントローラの開発コストも下がりそうですね．P4 の API を提供する
P4Runtime は gRPC を採用しています．gRPC のインターフェイスに即していれば自由に
C-Plane アプリ（コントローラ）を作れますし，NETCONF/YANG （xmlRPC）
のポートも生やせそうですね．&lt;/p&gt;
&lt;h4 id=&#34;10-29-追記&#34;&gt;10 /29 追記&lt;/h4&gt;
&lt;p&gt;ebiken さんにご指摘いただきましたが，上記では「Stratum がなければマルチプラットフォームで
P4 をデプロイできない」のような文脈に取れてしまいます．ご指摘の通りこれは&lt;strong&gt;私の勘違い&lt;/strong&gt;でした
（すみません）．
また，Stratum の大きな特徴はは &amp;ldquo;統一的に&amp;rdquo; プラットフォームを扱える点と，P4 言語
で規定される部分 &amp;ldquo;以外の&amp;rdquo; 共通インターフェイスも提供される点です．
例えば LINK UP/DOWN は P4 の範囲外ですが Stratum では gNMI/gNOI として提供されます．
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;はい。それに加えP4言語で規定される部分 &amp;quot;以外&amp;quot; の共通インターフェースが提供されるのが大きな特徴です。たとえばLINK Up/DownなどはP4言語の範疇外です。NTT武井さんの資料 Slide 10 の P4Runtime がP4言語で提供されるインターフェースで、gNMI/gNOIはStratum提供です。&lt;a href=&#34;https://t.co/kxDYs3t8b2&#34;&gt;https://t.co/kxDYs3t8b2&lt;/a&gt; &lt;a href=&#34;https://t.co/hdKx4ZZGzC&#34;&gt;pic.twitter.com/hdKx4ZZGzC&lt;/a&gt;&lt;/p&gt;&amp;mdash; Kentaro Ebisawa (@ebiken) &lt;a href=&#34;https://twitter.com/ebiken/status/1188809420156702721?ref_src=twsrc%5Etfw&#34;&gt;October 28, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;h3 id=&#34;fully-programmable-のつらさと品質保証&#34;&gt;‘fully-programmable’ のつらさと品質保証&lt;/h3&gt;
&lt;p&gt;P4 を使えば完全に D-Plane をフルスクラッチ可能です．つまり，IP routing や
ACL や forwarding といったよく使う機能も自分で作る必要があります．もちろん
サンプル P4 ファイルがいくつか提供されることもありますが．
あと，P4 がキャリアなどで商用利用されることを想定すると品質保証が大切だと考えられます．&lt;/p&gt;
&lt;p&gt;例えば最近では OSS のソフトウェアルータによる DC Networking が注目されていますが，
オープンであるがゆえに開発と品質保証を両立するのは大変です．だからこそ
Cisco や Juniper といったプラットフォームベンダは頑張っているわけですよね．
プラットフォームベンダの方々は一番要件が厳しいところ（おそらくキャリア）向け
を想定して開発をしているため，こうした方々の品質とユーザによる &amp;lsquo;fully-programmable&amp;rsquo; な
P4 部分をどう両立するかが大事なわけです．&lt;/p&gt;
&lt;p&gt;佐藤さん(Cisco)の資料の pp.18-21 に重要な図が載っています．&lt;/p&gt;
&lt;h5 id=&#34;-佐藤さんのスライド参照-pdfhttpsp4usersfileswordpresscom201910ciscopdf&#34;&gt;※ 佐藤さんのスライド参照: &lt;a href=&#34;https://p4users.files.wordpress.com/2019/10/cisco.pdf&#34;&gt;PDF&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;かいつまんで説明すると，品質保証がされた基本的な P4 ロジックをプラットフォームベンダ
（Cisco）が提供し，ユーザは独自で P4 ロジックを用意します．
加えて，プラットフォームベンダが開発環境として Constraint Checker も提供し，両者に機能重複が
無いかどうかチェックします．&lt;/p&gt;
&lt;p&gt;これなら IOS のように品質保証された基本的なロジックと P4 のプログラマビリティ
の両立が目指せます．この Checker が何をどこまでやってくれるかに期待がかかります．&lt;/p&gt;
&lt;p&gt;Cisco がチップを Barefoot のようなチップベンダから購入する
（＝自社製品向けにチップを内製しない）のも然り，ユーザ拡張のための
Checker も提供してくれるというのも然り，本気で P4 を商用利用しに行こうという
気合を感じます．Net One Systems（インテグレータ）からも会場で
ブースが出されていたことも同様のことを感じさせます．&lt;/p&gt;
&lt;h3 id=&#34;int-大流行&#34;&gt;INT 大流行&lt;/h3&gt;
&lt;p&gt;P4 ロジックだからこそのユースケースですが，In‐band Network Telemetry (INT)
を挙げる方がほとんどでした．その目的で面白かったのが，キャリアにおける SLA の
可視化です．例えば，5G ネットワークを提供するテレコムキャリアが，5G で謳われる
超低遅延，広帯域，同時多数接続といったサービスが本当に実現できているのか確認する
のに期待されています．&lt;/p&gt;
&lt;h5 id=&#34;武井さんntt研究所のスライド参照-pdfhttpsp4usersfileswordpresscom201910p4e383a6e383bce382b6e4bc9ae799bae8a1a8e8b387e69699ntte6ada6e4ba95pdf&#34;&gt;武井さん(NTT研究所)のスライド参照: &lt;a href=&#34;https://p4users.files.wordpress.com/2019/10/p4e383a6e383bce382b6e4bc9ae799bae8a1a8e8b387e69699ntte6ada6e4ba95.pdf&#34;&gt;PDF&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;INT では，INT のドメインに入るときにネットワーク機器が
メタデータ（タイムスタンプとか）をパケットに追加し，
ドメインから出るときに機器がメタデータを取り外してテレメトリサーバに計算結果
（パケットがドメイン内にいた時間とか）を送信します．これにより，パケット単位の
SLA 可視化が理論上は可能です．&lt;/p&gt;
&lt;p&gt;課題は時刻同期にあります．IEEE 1588 で定義される PTP はサブマイクロ秒のオーダー
で時刻同期ができますが，キャリアが持つような広域ネットワークへの適用は現状困難です．
この規模だと NTP が候補になりますが，時刻同期がミリ秒オーダーにまで荒くなります．
SLA と一口に言っても色々あるので，NTP でも保証ができるレベルであれば十分に実用が
期待できる手法だと思います．&lt;/p&gt;
&lt;p&gt;INT 以外のユースケースは後述の IRTF COIN RG でも議論がされています．&lt;/p&gt;
&lt;h3 id=&#34;研究の観点&#34;&gt;研究の観点&lt;/h3&gt;
&lt;p&gt;研究と言っても P4 の応用研究です．P4 自体の研究は私はちっとも詳しくありません．&lt;/p&gt;
&lt;p&gt;IETF がインターネット周辺の技術の標準化を担う団体である一方，IRTF もう少し研究
寄りの団体です．IRTF には Computing in the Network (COIN) という Research
Group (RG）があります．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://trac.ietf.org/trac/irtf/wiki/coin&#34;&gt;Proposed IRTF Research Group: Computing in the Network (COIN)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今回の発表では特に触れられていませんが，COIN においても P4 の活用が議論の対象
になっています．
焦点がよく当たるのは，一般的なアプリケーション処理をネットワーク内
にどのように透過的に落とし込むかという点です．
よく混同されますが，”In-Network Computing” と ”Network Computing” は別の概念です．
というか私も人に言われるまで特に気にしていませんでした．&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;Cambridge の Noa 先生による In-Network Computing の定義．SmartNIC, programable ASIC とかですかね．ネットワーク内にホストを置く Network Computing とは異なると明記されています．&lt;a href=&#34;https://t.co/fyenZmHw3v&#34;&gt;https://t.co/fyenZmHw3v&lt;/a&gt;&lt;/p&gt;&amp;mdash; nelio (@nelishiba) &lt;a href=&#34;https://twitter.com/nelishiba/status/1173781090193920000?ref_src=twsrc%5Etfw&#34;&gt;September 17, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;p&gt;In-Network Computing はデータをよりビットストリームとして扱っている一方で，
Network Computing はデータをミドルウェアやプロトコルをベースに扱っていると考えて
良いでしょう．&lt;/p&gt;
&lt;p&gt;私が取り組んでる研究のひとつに，一般的なアプリケーション処理を地理的に
分散した計算機にオフロードするというものがあります．当研究では
5Gネットワークを想定して Network Computing 寄りの考え方を採用しています．
国内研究会には論文&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; を出している（手前味噌v2）ので良かったら読んでみてください．
国際会議は目下取り組み中です（はよ出せ）．&lt;/p&gt;
&lt;p&gt;仮に In-Network Computing な手法をアプリケーション処理に適用する場合は NPU ぐらいの
柔軟性を設けたほうが良いでしょうね．使い方も D-Plane Programmability というよりは
ヘテロジーニアスコンピューティングやオフローディングという文脈でしょうか．
現状 P4 をアプリケーション処理一般に適用する試みはあまり見ないですね．&lt;/p&gt;
&lt;p&gt;あと何でもかんでも Hardware Offloading するのも良くないですよね，ソフトウェアと
違って刺さっていればデータが来なくても多少なりとも電力消費するので，ピークが
立つときには有効な手段ですがアベレージが低いと HW でやる意味が薄いですよね．
特にデータセンタは低消費電力に努めたいわけですし．&lt;/p&gt;
&lt;h3 id=&#34;p4-に限らずエコシステムを回すことが大切&#34;&gt;P4 に限らずエコシステムを回すことが大切&lt;/h3&gt;
&lt;p&gt;今回のイベントで，関わる人がみなで盛り上げるということの大切さを感じました．
そもそもインターネットの世界はマルチステークホルダーで，それぞれの立場のひとが
同じ方向を向けるというのは結構難しいのです．ネットワーク工学の研究をしていると
特に感じます．パワーゲームに勝てば良いのかも
しれませんが，私が目指すのは P4 のように多くの人が嬉しい技術です．&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;とても濃厚な時間でした．台風接近中だと言うのに 150人近い参加者だったそうで，
そこからも P4 の注目度が伺えます．
あと一緒に参加した友人x2 が P4 に詳しすぎたのでお昼ご飯食べてるときも私の稚拙な
解釈を聞いてくれました．おかげで何となく P4 を取り巻く世界（主に産業寄り）が
見えました．私のようにネットワーク工学を専攻する学生は産業界の話に積極的に
参加したほうが良いと思いました．Slack にも参加したのできちんと議論に参加して
いきたい．&lt;/p&gt;
&lt;p&gt;Stratum+BMv2 くらいさっさと動かしたいので APRESIA の桑田さんの資料を参考に
がんばります．あと研究室に Netronome NPU があるのでそれも Stratum から
触れるようにしたいですね．（研究とは直接関係ないのだけどね）&lt;/p&gt;
&lt;h5 id=&#34;桑田さんの資料参照-pdfhttpsp4usersfileswordpresscom201910e697a5e69cacp4e383a6e383bce382b6e4bc9a2019_apresia_v04pdf&#34;&gt;桑田さんの資料参照: &lt;a href=&#34;https://p4users.files.wordpress.com/2019/10/e697a5e69cacp4e383a6e383bce382b6e4bc9a2019_apresia_v.0.4.pdf&#34;&gt;PDF&lt;/a&gt;&lt;/h5&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Pat Bosshart, Dan Daly, Glen Gibb, Martin Izzard, Nick McKeown, Jennifer Rexford, Cole Schlesinger, Dan Talayco, Amin Vahdat, George Varghese, and David Walker. 2014. P4: programming protocol-independent packet processors. SIGCOMM Comput. Commun. Rev. 44, 3 (July 2014), 87-95. DOI: &lt;a href=&#34;https://doi.org/10.1145/2656877.2656890&#34;&gt;https://doi.org/10.1145/2656877.2656890&lt;/a&gt; &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Nick McKeown, Tom Anderson, Hari Balakrishnan, Guru Parulkar, Larry Peterson, Jennifer Rexford, Scott Shenker, and Jonathan Turner. 2008. OpenFlow: enabling innovation in campus networks. SIGCOMM Comput. Commun. Rev. 38, 2 (March 2008), 69-74. DOI=http://dx.doi.org/10.1145/1355734.1355746 &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;早川 侑太朗, 渡邊 大記, 岡田 和也, &amp;ldquo;clnfv：コンテナを用いた軽量なNFVアーキテクチャ,&amp;rdquo; 信学技報, vol. 117, no. 303, NS2017-111, pp. 1-6, 2017年11月. &lt;a href=&#34;https://www.ieice.org/ken/paper/20171116tbzw/&#34;&gt;研究会ページ&lt;/a&gt; &lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;佐藤 友範, 渡邊 大記, 林 和輝, 近藤 賢郎, 寺岡 文男, “5Gコアネットワーク向けアプリケーション処理連接基盤”, 研究報告マルチメディア通信と分散処理 (DPS), Vol. 2019-DPS-180, no. 18, pp. 1 - 8, 2019 年 9 月. &lt;a href=&#34;https://ipsj.ixsq.nii.ac.jp/ej/?action=pages_view_main&amp;amp;active_action=repository_view_main_item_detail&amp;amp;item_id=199311&amp;amp;item_no=1&amp;amp;page_id=13&amp;amp;block_id=8&#34;&gt;論文リンク&lt;/a&gt; &lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
       </item>
       
       <item>
         <title>KLab Expert Camp にチューターとして参加した</title>
         <link>https://negli0.github.io/posts/klab-expert-camp/</link>
         <pubDate>Mon, 02 Sep 2019 14:30:09 +0900</pubDate>
         
         <guid>https://negli0.github.io/posts/klab-expert-camp/</guid>
         <description>&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;
&lt;p&gt;2019 年 8/26 ~ 8/29 に開催された 第1回 KLab Expert Camp にチューターとして参加
させていただきました．テーマは「TCP/IPプロトコルスタック自作開発」です．
KLab Expert Camp についてはこちらを御覧ください．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://pr.blog.klab.jp/archives/51712424.html&#34;&gt;技術系インターン特別版「KLab Expert Camp」を初開催！: KLab広報ブログ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参加までの経緯&#34;&gt;参加までの経緯&lt;/h2&gt;
&lt;p&gt;6月上旬に主催者である山本さんに Twitter で「めっちゃいいですね」とお伝えしたら
「チューターお待ちしています」とのお返事をいただきました．(ほぼこれだけで決まっちゃった)&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;チューターお待ちしています🤗&lt;/p&gt;&amp;mdash; YAMAMOTO Masaya (@pandax381) &lt;a href=&#34;https://twitter.com/pandax381/status/1137027047589421058?ref_src=twsrc%5Etfw&#34;&gt;June 7, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;p&gt;この KLab Expert Camp の告知は山本さんのツイートだけだし，
それにテーマもニッチだし，まあ 4,5 人くらいは集まるでしょと思っていました．&lt;/p&gt;
&lt;p&gt;後日打ち合わせで 15 人程度いると伝えられてマジかとなりました．（どこに生息してるんだ）&lt;/p&gt;
&lt;h2 id=&#34;expert-camp-の内容&#34;&gt;Expert Camp の内容&lt;/h2&gt;
&lt;p&gt;「TCP/IP プロトコルスタック自作開発」という大きなテーマがあり，申込時の希望に
合わせて以下のコースに分かれて 4 日間ひたすら開発を進めます．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(1) 基本コース：受講者全員が，用意された教材に沿って学習を進めていく&lt;/li&gt;
&lt;li&gt;(2) 発展コース：個人毎に，発展的な課題にチャレンジする&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;基本コース&#34;&gt;基本コース&lt;/h3&gt;
&lt;p&gt;基本コースでは，山本さんの開発している microps (マイクロピーエス) を題材にし，
山本さんがプロトコルスタックとはなんぞやという話から，各 OS の実装，
microps ではどう実装しているのか，という話を講義形式で進めます．ある程度
まで講義が進んだら手を動かして自分で実装したり動作検証したりします．&lt;/p&gt;
&lt;p&gt;microps はこちら．非常にきれいな実装です．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/pandax381/microps&#34;&gt;microps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;発展コース&#34;&gt;発展コース&lt;/h3&gt;
&lt;p&gt;発展コースでは，参加者の作りたいものを作ります．
今回は 4 名からの希望で，各自以下の内容に取り組んでいらっしゃいました．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;L3 まで microps の写経をしながら改善 + L4 を再実装する&lt;/li&gt;
&lt;li&gt;Rust で TCP のメカニズムと Socket-like な API を実装する&lt;/li&gt;
&lt;li&gt;microps 上にルーティングプロトコルを乗せる&lt;/li&gt;
&lt;li&gt;Rust で L2 ~ L4 をフルスクラッチする&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;みなさん偶然異なるテーマになって面白い．ちなみに私は主に発展コースの
参加者からの質問に答えたり，質問に答えるための調べ物（あとハッシュタグつきで
Tweet！）
をしていました．&lt;/p&gt;
&lt;h2 id=&#34;お役目-本題&#34;&gt;お役目 (本題)&lt;/h2&gt;
&lt;p&gt;基本的に私のお役目は発展コースの方の質問に答えることなのですが，私は研究者
の立場から参加者の方々になにか伝えられたらいいなと思っておりました．
4日間みなさんが作っていくものがどういう研究につながっているのかとか，今の
インターネットを取り巻く情勢（クラウド事業者や ISP）の話とか，なぜ IoT が進んで
行かないのかとか，5G って何が変わるの？とか，クラウドに対するエッジとは？とか．&lt;/p&gt;
&lt;p&gt;プロトコルスタックは1台のマシン上における比較的ミクロな世界なわけですが，
それが大規模につながるとこんな世界が広がっているんだよ〜ということを伝えようと
懇親会でたくさん喋っていました．参加者用 Slack の雑談チャネルにおもしろ論文を
ブンブン投げたりもしました．将来有望な学生たちに種を蒔きまくっていました．
全然時間足りなかったけど．&lt;/p&gt;
&lt;p&gt;私がいる意味ってこういう話を楽しくして，研究おもすれ〜とか，インターネットの世界
すげ〜とか思ってもらうことだと思ってたんですよね．なのでもし今回私の話が
コンピュータネットワークやインターネットを専業にするぞというきっかけに（ほんの
ちょっとでも）なってもらえたら嬉しいです．もしかしたら一緒にお仕事をするかも
しれない．というか，別に専業にしなくてもいつかどこかで「あ〜 nelio
ってやつがなんか言ってたなぁ」ぐらいに思ってもらえれば私はお役目を果たせたと思います．
遅効性だね．&lt;/p&gt;
&lt;h2 id=&#34;感想&#34;&gt;感想&lt;/h2&gt;
&lt;p&gt;Twitter でもつぶやきましたが，参加者のみなさんの集中力が本当にすごかった．
基本コースも発展コースもみんな黙〜〜〜〜〜〜〜〜〜〜〜〜〜〜〜って
ひたすら黒い画面と向き合ってプロトコルスタックかりかり作ってるんですね．&lt;/p&gt;
&lt;p&gt;あと，みなさん言語化能力と現状把握能力に長けていて，質問が的確でした．
とても質問に答えやすかったです．私が知らないことや盲点だったこと
に気付かされることもしばしばあり，非常に勉強になりました．&lt;/p&gt;
&lt;p&gt;今回の様子が気になる方は Twitter で
&lt;a href=&#34;https://twitter.com/hashtag/KLabExpertCamp?src=hashtag_click&amp;amp;f=live&#34;&gt;#KLabExpertCamp&lt;/a&gt;
&lt;a href=&#34;https://twitter.com/hashtag/%E3%83%97%E3%83%AD%E3%83%88%E3%82%B3%E3%83%AB%E3%82%B9%E3%82%BF%E3%83%83%E3%82%AF%E8%87%AA%E4%BD%9C?src=hashtag_click&#34;&gt;#プロトコルスタック自作&lt;/a&gt;
のハッシュタグを追っていただけると良いと思います．&lt;/p&gt;
&lt;p&gt;もし次回があればまた参加したいなと思えるほど素晴らしいイベントでした．&lt;/p&gt;
&lt;p&gt;山本さんをはじめとする関係者の皆様，ありがとうございました．&lt;/p&gt;
</description>
       </item>
       
       <item>
         <title>Graduation from the 8th Cybozu Labs Youth</title>
         <link>https://negli0.github.io/posts/graduate-8th-cybozu-labs-youth/</link>
         <pubDate>Thu, 18 Apr 2019 19:26:19 +0900</pubDate>
         
         <guid>https://negli0.github.io/posts/graduate-8th-cybozu-labs-youth/</guid>
         <description>&lt;h2 id=&#34;サイボウズラボユースを卒業した&#34;&gt;サイボウズ・ラボユースを卒業した&lt;/h2&gt;
&lt;p&gt;少々時間が経過しましたが，3/22 に開催された第8期サイボウズ・ラボユース成果発表会
をもってラボユースを卒業したことを報告します．成果発表会の様子はこちらから見ることができます．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.cybozu.io/entry/2019/04/02/080000&#34;&gt;「第8期サイボウズ・ラボユース成果発表会」開催 - Cybozu Inside Out | サイボウズエンジニアのブログ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;すでに第9期 の募集も始まっています．通年募集で早いものがちです．
非常に良い経験をさせてもらったので，当エントリが少しでも周知に貢献できればと思います．&lt;/p&gt;
&lt;p&gt;募集のページはこちらです．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://labs.cybozu.co.jp/youth/requirements.html&#34;&gt;サイボウズ・ラボユース：募集要項&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;サイボウズラボユースとは&#34;&gt;サイボウズ・ラボユースとは&lt;/h3&gt;
&lt;p&gt;募集要項のとおり，**個人のソフトウェア研究開発を会社が応援
(奨励金，社員の密なメンタリング)**してくれる制度で，&lt;strong&gt;中卒以上の未就業者&lt;/strong&gt;を対象
としています．在宅による遠隔地からの参加も考慮してくれますが，基本はオンサイト勤務です．&lt;/p&gt;
&lt;p&gt;この制度は以下のような面白い特徴があります．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;企業の業務に直接かかわらなくて OK&lt;/li&gt;
&lt;li&gt;著作権・特許権などの権利が開発者個人に帰属&lt;/li&gt;
&lt;li&gt;研究成果を論文として公開して OK&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;【必須条件】成果をオープンソースで公開する&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;企業の制度にもかかわらず成果物が業務に関係しないものでもよい，権利が開発者個人に
帰属する，という点が他にはない魅力だと思います．&lt;/p&gt;
&lt;h3 id=&#34;応募までの経緯&#34;&gt;応募までの経緯&lt;/h3&gt;
&lt;p&gt;私が応募に至った経緯はおおむね次のとおりです．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;M2(当時) の途中で自分の実装力への危機感&lt;br&gt;
私は基本的に研究に必要になったときに実装するタイプで，しかもこれまで PoC 実装
くらいしかやってこなかった．別に苦手ではないが，「研究 → 実装」のパターンでは
これまで通りのことしかできないのでは？博士課程ではなにか新しいことを取り入れる
必要性を感じ始める．&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/slankdev&#34;&gt;@slankdev&lt;/a&gt; 氏が Twitter で「ラボユース」とか言ってた気がした &lt;br&gt;
ラボユースってなんだ？ → 過去の成果発表ページを眺める → 出そ&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;目的意識&#34;&gt;目的意識&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;実装ドリブンな研究: 「実装 → 研究」の練習&lt;/strong&gt;&lt;br&gt;
作ったものにストーリーを与える（研究として位置づける）練習になると思いました．
積み重ねれば，実装したことそれ自体が研究として価値を持つということができるように
なります．私の目標は研究もエンジニアリングも高いレベルで両立する人間です．
研究だけでもエンジニアリングだけでも目指す像にはたどり着けません．
大変なんですけどね．&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;お金がいただける&lt;/strong&gt;&lt;br&gt;
お金がいただけるなら大学の研究の時間を少し削ってでもやるだろうという判断です．
大学では単発で終わらないような大きめの世界観を描いた研究をしています．M2 から研究
チームの親をやっていることもあり，大学の研究に優先的に割当てないと
研究が空中分解しかねないためです．あとは今の研究がわりと好きなので．&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;カーネルプログラミングしてみたい&lt;/strong&gt;&lt;br&gt;
研究の性質や背景の都合上，私はこれまでユーザ空間にプロトコルを実装してきました．
ご存知の通り Linux や FreeBSD などのプロトコルスタックはカーネル空間に実装
されています．こういうきっかけがなければ博士課程の間にわざわざ時間を確保しない
だろうなと思いました．&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;一流の職業エンジニアの方法論に倣う&lt;/strong&gt;&lt;br&gt;
大学の研究とは異なり，多くの企業のエンジニアは究極的に Practical であることを
重要視すると思います．つまり，&lt;strong&gt;目に見える成果物の背後にはそれをその領域へと導いた
数々の実践的なノウハウ（方法論）がある&lt;/strong&gt;はずだと思いました．問題となるコードの場所
の当たりをつける，どこがボトルネックになっているのかすばやくざっくり計測する，
コードを書くときに意識することなど．経験が豊富な企業のエンジニアからの密な指導
というものは，私のように大学で我流でプログラムを書く人間としては喉から手が出る
ほど欲しいものです．だって研究するようになるまでほとんど授業でしかコードを書いて
こなかったんだもの（ついていくので手一杯だった）．&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;そんなこんなで申し込み，面接では自分の研究についていっぱい喋り，採用されました．
始めは週2で通っていましたが，自分の体調や大学の研究との兼ね合いから週1に収束
していきました．&lt;/p&gt;
&lt;h4 id=&#34;exlay-階層独立性の高いプロトコルスタックフレームワーク&#34;&gt;exlay: 階層独立性の高いプロトコルスタックフレームワーク&lt;/h4&gt;
&lt;p&gt;成果物です．動作原理などの詳細は別記事を後日書くとして，ここでは成果発表のスライドを挙げる
にとどめます．メンターは光成さん（&lt;a href=&#34;https://twitter.com/herumi&#34;&gt;@herumi&lt;/a&gt;）です．
&lt;a href=&#34;https://herumi.github.io/ango/&#34;&gt;『クラウドを支えるこれからの暗号技術』&lt;/a&gt; や
x86 向け JIT アセンブラである &lt;a href=&#34;https://github.com/herumi/xbyak&#34;&gt;Xbyak&lt;/a&gt;で
ご存知の方も多いかと思います．&lt;/p&gt;


&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;fad0dd3e2cf84c08bca27e6e222b5237&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;共通のインターフェイスをもったプロトコル群を用意しておき，利用者が好きな順番で
階層を積み上げるというプロトコルスタックができたら面白いな〜と思い，これを
テーマにしました．&lt;/p&gt;
&lt;h4 id=&#34;実際に何を作業したか&#34;&gt;実際に何を作業したか&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;カーネル空間に TCP Echo サーバをカーネルモジュールで作って自作クライアントとやり取りさせる&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ほかの方のメンターをやっている星野さん(&lt;a href=&#34;https://twitter.com/starpoz&#34;&gt;@starpoz&lt;/a&gt;)から workqueue とか completion とかのカーネル機能を紹介してもらい実際に使ってみる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__attribute__&lt;/code&gt; や &lt;code&gt;aligned (alignment)&lt;/code&gt; などの gcc の独自拡張を知る&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;strace&lt;/code&gt; や &lt;code&gt;trace-cmd&lt;/code&gt; などのトレーサを使って関数呼び出しを追いかける&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;関数名からソースコードにおける該当箇所を探してふむふむする&lt;/li&gt;
&lt;li&gt;他にも C/C++ でコーディングするうえでの便利なツールを紹介してもらう&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/f6yT7qVq9R96tF&#34; 
	width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; 
	scrolling=&#34;no&#34; 
	style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; 
&lt;/iframe&gt; 



&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;NIC デバイスドライバの勉強をした&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Packt から出ている &lt;a href=&#34;https://www.packtpub.com/networking-and-servers/linux-device-drivers-development&#34;&gt;Linux Device Driver Development&lt;/a&gt;
という本の NIC デバドラの章を訳しながら読む．
&lt;ul&gt;
&lt;li&gt;Linux 4.x に対応している貴重な本です．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NIC デバドラを書く上で Linux カーネルレベルの抽象化をどう扱うか学ぶ&lt;/li&gt;
&lt;li&gt;特定のハードウェアのデータシートとかは読まないレベルの抽象度の話
&lt;ul&gt;
&lt;li&gt;何をしたいときどの関数を呼ぶとか，そういう&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;成果発表に向けてまずはユーザ空間で動くものを作る（とのご指導をいただく）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ロジックができてからカーネルで動かしてみる，でないと大変&lt;/li&gt;
&lt;li&gt;ということでユーザ空間実装に変更&lt;/li&gt;
&lt;li&gt;この時点でこの PoC ができれば OK かな，と思うようになる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;プロトコルを共有ライブラリとして扱うように設計した&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.oreilly.co.jp/books/4873112885/&#34;&gt;Binary Hacks ――ハッカー秘伝のテクニック100選&lt;/a&gt;
を読んで共有ライブラリの作り方や動的なロードの仕方を勉強&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dlopen&lt;/code&gt; とかはじめて使って楽しかった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;アプリとプロトコルスタックを別プロセスとする設計にした&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;プロトコルスタックがカーネル空間実装の場合と同様のモデルになる&lt;/li&gt;
&lt;li&gt;アプリが使用する exlay API （send, recv, close など）は RPC で実装した
&lt;ul&gt;
&lt;li&gt;glibc で完結できるので SunRPC + XDR を採用，だいぶ詳しくなった&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UDP/IP/Ethernet のスタックを実装&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ethernet しか間に合わなかった&lt;/li&gt;
&lt;li&gt;スタックのフレームワーク本体がけっこう大変だったのもある
&lt;ul&gt;
&lt;li&gt;とはいえ実装力が足りてないな〜〜〜&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;成果発表&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;直前で不具合を発見して修正したが make し忘れてうまく動かなかった（悲しい）&lt;/li&gt;
&lt;li&gt;懇親会で光成さんに「もちょっと実装頑張りましょうね」と言われる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;今後の展望&#34;&gt;今後の展望&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ユーザ空間上でのプロトコルの充実&lt;br&gt;
今の所 UDP/IP/Ethernet しか無い（しかも機能が網羅的ではない）ので簡単な TCP くらい
は用意したい．&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;トンネリングエンドポイントのエクスポート&lt;br&gt;
例えば VXLAN (L2 over UDP) なんかを exlay で実現しようと思ったら，
Ethernet, IP, UDP, VXLAN, Ethernet みたいに &lt;strong&gt;アンダーレイからスタックを記述
しなければならない&lt;/strong&gt; のでもはやトンネリングではない状態です．なので，
作成したスタックをトンネルエンドポイントとしてエクスポートし，exlay API で
触れるようにしてトンネリングプロトコルが簡単に実装できるようにする．&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;カーネル空間実装&lt;br&gt;
FreeBSD のカーネルにカーネルモジュールとして実装することを考えています．
可能なら TCP(UDP)/IP といったルーチンを使いまわして exlay に組み込めたらかっこいい
なと思います．この場合，各プロトコルはカーネルモジュールとして提供します．&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;感想および反省&#34;&gt;感想および反省&lt;/h4&gt;
&lt;p&gt;エンジニアリングの現場で活躍している光成さんや星野さんとした実践的なお話は，
大学にいるだけではなかなかできないことだと思いました．もちろん一般的な企業の
インターンでもこういうお話はできると思いますが，&lt;strong&gt;自分がやりたいことに対して&lt;/strong&gt;
時間（とお金）を費やしてもらえる機会は他では得難いものだと思います．&lt;/p&gt;
&lt;p&gt;ただ，光成さんや星野さんといった人的リソースを活用しきれたかと言われれば，
まだまだだなと感じます．exlay は学位取得には直接関係しない（と現状は思われる）
私の趣味研究です．学位取得に関係するテーマでラボユースに申し込むと
ものすごい加速するんじゃないでしょうか．exlay についても論文は書くつもりでいます．
どの段階で書くかはわからんが&amp;hellip;&lt;/p&gt;
&lt;p&gt;あまり時間を割かなかった私でさえ濃い経験ができたので，いわんやをや．
実装ドリブンな研究として繋がりそうだし．友達もできたし．本当にやってみてよかった！&lt;/p&gt;
&lt;h3 id=&#34;応募を検討しているひとへ&#34;&gt;応募を検討しているひとへ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;もっと詳しく知りたいひとへ&lt;br&gt;
気になることがあれば Twitter の DM でもリプでもお答えします．というか，
私に限らずほとんどの卒業生は相談に乗ってくれると思います．これをきっかけに
お友達になりましょう．ぜひ．&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;具体的に作りたいものがないひとへ&lt;br&gt;
ツイートの通り，「XX ができるようになりたい」というふうに伝えるでも私は良いと
思っています．XX ができるようになっていくうちに XX を使ったなにかが作れそう
だとひらめくと思います．ぜひ．
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;第9期 サイボウズ・ラボユースの募集がはじまりました．会社からお金をもらって好きにプログラムを書き，成果が自分に帰属するという稀有な制度です．まだ作りたいものが具体的にない人は「現状XXだが〜ができるようになりたい」ということを伝えてみるのもアリだと思います．&lt;a href=&#34;https://t.co/w55Nwf5iDH&#34;&gt;https://t.co/w55Nwf5iDH&lt;/a&gt;&lt;/p&gt;&amp;mdash; nelio (@nelishiba) &lt;a href=&#34;https://twitter.com/nelishiba/status/1117645489023774720?ref_src=twsrc%5Etfw&#34;&gt;April 15, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;実装力が足りてないと思っているひとへ&lt;br&gt;
落ちたときに考えましょう．それに，ある程度のところまで引き上げてもらったら
そのあとは自力でなんとかできるようになると思います．そこに到達するまでに
個人差があるだけです．
ラボユースで実装力を高めるすばらしいきっかけだとと思って．ぜひ．&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;B4 および M1, M2 のひとへ&lt;br&gt;
卒論や修論のテーマと関係しそうなことを選ぶと研究が加速します．ぜひ．&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;D のひとへ&lt;br&gt;
私以外にそんなことをする人がいるとはなかなか思えませんが，なるべく学位取得に
関係するテーマを選ぶと良いでしょう．学振に採用されている方は，ラボユースと
併用できるかはわかりませんが．ぜひ．&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ネット上で影響力が強いひとへ&#34;&gt;ネット上で影響力が強いひとへ&lt;/h3&gt;
&lt;p&gt;特にこのエントリの共有でなくてもいいのでラボユースという制度を周知していただければ
幸いです．私にもっと（ネット上の）チカラがあれば&amp;hellip;&lt;/p&gt;
</description>
       </item>
       
       <item>
         <title>Power Balance in the WEB</title>
         <link>https://negli0.github.io/posts/power-balance-in-network/</link>
         <pubDate>Sun, 24 Feb 2019 18:21:44 +0900</pubDate>
         
         <guid>https://negli0.github.io/posts/power-balance-in-network/</guid>
         <description>&lt;h3 id=&#34;はじめに&#34;&gt;はじめに&lt;/h3&gt;
&lt;p&gt;ご存知の通り現在の WEB および WEB 周辺技術には HTTPS が多く使用されます．
某国のでっかいファイヤーウォールの件や
SNI を利用した某国のトラフィック遮断の件を見たり，
WEB の動向をのんびり追ったりしていて思うことがちらほらあるわけです．
私の研究は WEB とはあまり関係ないのですが，実用を考えたときの
インターネット上のデファクトスタンダードが WEB に存在すると
感じます．WEB の世界の「あたりまえ」を意識することは大切だと思いながら，
最近感じたことを書きます．&lt;/p&gt;
&lt;h3 id=&#34;現在の-web-になるまでの大まかな流れ&#34;&gt;現在の WEB になるまでの大まかな流れ&lt;/h3&gt;
&lt;p&gt;私の話で登場するのは，ざっくりと&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;サービス事業者&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;コンテンツ事業者とも言えます&lt;/li&gt;
&lt;li&gt;大きいところだと Google, Akamai, Facebook など
&lt;ul&gt;
&lt;li&gt;いわゆるハイパージャイアント&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ネットワーク&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;モバイルキャリア&lt;/li&gt;
&lt;li&gt;ブロードバンドネットワーク&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;の2者です．今回はこの2者に焦点を当てます．&lt;/p&gt;
&lt;p&gt;まずは あきみちさん
（&lt;a href=&#34;https://twitter.com/geekpage&#34;&gt;Twitter: @geekpage&lt;/a&gt;）の 2009 年（！）
のこの記事を読んでください．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.geekpage.jp/blog/?id=2009/10/20/1&#34;&gt;インターネットの形を変えて行くGoogle,Facebook,Akamai&amp;hellip;: Geekなページ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ここから私の言いたいことを要約すると，
&lt;strong&gt;ハイパージャイアント（コンテンツ事業者）の台頭で ISP の収入が減ったという変化&lt;/strong&gt;
です．特に注目したいのは記事内の次の文です．&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;コンテンツを管理するだけではなく、ネットワークも自律的に自分で運用管理することによって、巨大な存在がより巨大になって行く様子を今まさに皆が目にしている感じなのかも知れません。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;商用 ISP のおかげでインターネットが普及&lt;/li&gt;
&lt;li&gt;インターネットが普及したおかげでコンテンツ事業者が力をつけ始める&lt;/li&gt;
&lt;li&gt;力をつけたコンテンツ事業者が独自ネットワークを持つ&lt;/li&gt;
&lt;li&gt;コンテンツ事業者と peer を張ったほうがネットワークオペレーションのコストが下がる&lt;/li&gt;
&lt;li&gt;トラフィックを集めやすくなったコンテンツ事業者がさらに力をつける&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;実際はもっと複雑なんでしょうが，概ねこんな感じのことが起こっているという
ことでしょうか．例えば，一昔前は ISP からメールアドレスを貰っていたと
今は WEB ベースのメール（Gmailなど）が猛威を奮っているわけです．&lt;/p&gt;
&lt;h3 id=&#34;次の方向性&#34;&gt;次の方向性&lt;/h3&gt;
&lt;p&gt;先の記事が書かれたのが 2009 年で私がこのエントリを書いているのが
2019 年です．研究の傍ら観測可能な範囲で，ここ数年でどのような変化が
起こっているかと言うと，&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;コンテンツ事業者側&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;サービス利用者のために超低遅延を目指す
&lt;ul&gt;
&lt;li&gt;CDN 増強，QUIC の導入&lt;/li&gt;
&lt;li&gt;クラウドのリージョン増加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;情報セキュリティの観点から TLS ベースの通信を強く推奨
&lt;ul&gt;
&lt;li&gt;HTTP → HTTPS → HTTP over QUIC (HTTP/3) の流れ&lt;/li&gt;
&lt;li&gt;Everything over HTTPS（さらにそういう流れが進む？）
&lt;ul&gt;
&lt;li&gt;メール，動画配信などは既に over HTTPS&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;ネットワーク側&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SDN/NFV や Service Chaining など，汎用マシン/汎用技術に基づく新しいトラフィックの操作に注力
&lt;ul&gt;
&lt;li&gt;OpenFlow&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; → P4&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; (Data Plane Programmability)&lt;/li&gt;
&lt;li&gt;IPv6 Segment Routing (SRv6)&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;Service Function Chaining (SFC)&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;オペレーションの自動化
&lt;ul&gt;
&lt;li&gt;運用コスト削減&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;こんな感じです．他にも進んでいく方向性が現れている部分があると思います．
私はコンテンツ事業者でもネットワークオペレータでも無いので，
実際と違うことがあれば（あるとおもう&amp;hellip;）ごめんなさい．
ここからだけではネットワークオペレータ側がどうやって先の変化の
盛り返しを図っているのか私にはちょっとわかりません．
例えば，今後の ISP 業務はどう変わっていくのでしょうか．&lt;/p&gt;
&lt;h3 id=&#34;パワーバランス&#34;&gt;パワーバランス&lt;/h3&gt;
&lt;p&gt;ここが本題になります．先の通り，ネットワークオペレータ側は運用コストや
設備コストを削減するために**「低コストで賢いトラフィック操作」**
を頑張っている印象です．
一方でコンテンツ事業者（エンド）側は**「低遅延や高セキュリティ」**
を頑張っている
印象です．話題の QUIC（Quick UDP Internet Connection）&lt;sup id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;
というプロトコルですが，
登場した背景および取っている手法は次の2点で概ね同意がいただけるかと
思います．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;低遅延 → over UDP 化&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;ネットワークオペレータ側のミドルボックスの影響を回避&lt;/li&gt;
&lt;li&gt;TCP ベースにおいて課題だった Head of Line Blocking を回避&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;高セキュリティ → TLS 必須&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;QUIC ヘッダの一部を除くほぼ全ての UDP ペイロードを暗号化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;余談ですがover-udp-は要素技術ではなくあくまでも結果として選ばれた手段-だと思いますが-ip-直上で動作するように設計上プロトコル番号を持ってほしかったというのが私の本音ですそのうえで現在のミドルボックス-の都合上現実的な解として-over-udp-採用したと言える-sそうすれば-quic-はトランスポートだって言って全員黙るでしょうにぉs&#34;&gt;余談ですが，over UDP は要素技術ではなく，あくまでも結果として選ばれた手段 だと思いますが， IP 直上で動作するように設計上プロトコル番号を持ってほしかったというのが私の本音です．そのうえで現在のミドルボックス の都合上，現実的な解として over UDP 採用した，と言える． &lt;!-- raw HTML omitted --&gt;そうすれば QUIC はトランスポートだって言って全員黙るでしょうに（ぉ）&lt;!-- raw HTML omitted --&gt;&lt;/h6&gt;
&lt;p&gt;現在の主な QUIC の用途としては HTTPS の下のトランスポートですが，
IETF QUIC では用途を HTTPS に限っていないようです．
つまりポート番号は 443 以外でも設計上 OK みたいです．&lt;/p&gt;
&lt;p&gt;では，ネットワークオペレータが何に基づいてパケット操作をしているかと
いえば， それは
&lt;strong&gt;5 tuple （src IP, dst IP, src Port, dst Port, Protocol No.）&lt;/strong&gt;
でしょう．&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;ポート&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;サービス&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;22&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;SSH&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;53&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;DNS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;80&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;HTTP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;443&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;HTTPS&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;狭義のポート番号はノード内の通信端点の識別子ですが，
ポート80 なら HTTP，443 なら HTTPS
というふうに， いわゆる Well Known ポートはサービスと対応しており，広義
ではサービスの識別子とも言えます．
ご存知の通り，ブロードバンドもモバイルも，ポート 80，443 のリクエストが
大半を占めています．IIJ から出ている Internet Infrastructure
Review&lt;sup id=&#34;fnref:6&#34;&gt;&lt;a href=&#34;#fn:6&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;6&lt;/a&gt;&lt;/sup&gt; を読むと面白いと思います．&lt;/p&gt;
&lt;p&gt;WEB 上サービスが多様化して全部 HTTPS 上に集約されていくのは，時代の流れも
あって止められないでしょう．が，&lt;strong&gt;周辺技術までも over HTTPS 化するのは
それでいいんか？と思います．&lt;/strong&gt; アプリケーションペイロードを暗号化する
のは賛成です．
例えば DNS over HTTPS&lt;sup id=&#34;fnref:7&#34;&gt;&lt;a href=&#34;#fn:7&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;7&lt;/a&gt;&lt;/sup&gt; ですが，機密性を考慮するなら over TLS（over QUIC?）
で良いと思うのです．
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;ネットワークオペレータが5-tuple を有意に扱える状態でかつ中立を貫くのがバランスの良い世界だと思っていたのだが、世の中そうではないのかもしれん。私はコンテンツ事業者でもネットワークオペレータでもないけども、そのバランスを保つのは大事な気がするのだが。&lt;/p&gt;&amp;mdash; nelio (@nelishiba) &lt;a href=&#34;https://twitter.com/nelishiba/status/1097277192168300544?ref_src=twsrc%5Etfw&#34;&gt;February 17, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

私はコンテンツ事業者でもネットワークオペレータでも
ないのですが，
&lt;!-- raw HTML omitted --&gt;Twitter で垂れ流したとおり，
私はこの辺のバランスがとても大事だと思っていますが，そう思う人は少ないのでしょうか&amp;hellip;？&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;QUIC ではほとんどの制御パケットすら観測不可能である一方，
Spin Bit について議論されるなど，オペレーションとの落とし所を探るような
議論も見えます．UDP ポート番号は見えるし．
ところがなんでもかんでも over HTTPS が進むと 5 tuple
の意味がなくなるのですが&amp;hellip;
ポート番号はもはや機能していないというならば，それは果たして良い
（健全な）状態なの？と思ってしまいます．
&lt;!-- raw HTML omitted --&gt;実際に NoC 業務 や SoC
業務をやっている方はどう思っているのだろう．&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h6 id=&#34;またまた余談ですがそもそも名前解決のトラストモデルが-tls-に基づくなら-dhcp-で降ってくるレゾルバをどうやって信頼するのとなってしまうわけでとするならブラウザにレゾルバのアドレス8888-とかを決め打ちするんですかね&#34;&gt;またまた余談ですが，そもそも名前解決のトラストモデルが TLS に基づくなら DHCP で降ってくるレゾルバをどうやって信頼するのとなってしまうわけで．とするならブラウザにレゾルバのアドレス（8.8.8.8 とか）を決め打ちするんですかね&amp;hellip;&lt;/h6&gt;
&lt;h3 id=&#34;インターネットの発達と-end-to-end-原理の今後&#34;&gt;インターネットの発達と End-to-End 原理の今後&lt;/h3&gt;
&lt;p&gt;改めて語るべくもないと思いますが，インターネットが現在ほどの規模に
発展できたのは IP というプロトコルがステートレスで複雑ではなかった
（シンプルだった）からというのは大きいポイントだと思われます．
IP で古くから言われている End-to-End 原理に則り，ネットワーク側は
いわゆるダム（dumb）ネットワークであり，機能は通信のエンド（両端）
で実装されるものでした．ところが，身近なところで言えば NAT/NAPT は
この原理を破るものであり，End-to-End 原理はもはや機能しているのか
もわかりません．学術な立場でさえも，元々の意味での End-to-End 原理
に重きを置くものかどうか，私にはよくわかりません．
もちろんネットワーク中立性という観点からは，通信は End-to−End 原理が
基本で，その中ではネットワーク側は dumb で解釈されるべきだと思います．&lt;/p&gt;
&lt;p&gt;つまるところ，私は End-to-End 原理の解釈を今の時代に合うように
もう一度考え直したいのです．&lt;/p&gt;
&lt;p&gt;個人的な意見を重ねますが，インターネットの発展の基本である
シンプルさは大事なのだけれど，シンプルさをなるべく維持しつつも
ネットワーク側も賢くなって（not-dumb）いくと良いなと思います．
SFC 然り，SRv6 然り，ネットワーク側が賢くなることは，
技術の発展でしばしば見られる「抽象度があがる」ことだと思います．
L2 の上に L3，L4 と抽象度の高い機能が
積み上がったように．そして SFC も SRv6 も，コスト削減に効くと思いますが，
新たな価値を創造する方向にも進んだらなお素晴らしいなと思います．
そういうのがネットワーク側の新しい業務（価値）になっていくんじゃない
のかなあ．
そのためにも，というわけではないのですが，End-to-End 原理とは
なんだったのか，改めてちょっと考えたいのです．&lt;/p&gt;
&lt;p&gt;ともあれコンテンツ事業者もネットワークも両方ガポガポ儲かってほしい．&lt;/p&gt;
&lt;h4 id=&#34;その他&#34;&gt;その他&lt;/h4&gt;
&lt;p&gt;早いとこ MEC（Mobile Edge Computing&lt;sup id=&#34;fnref:8&#34;&gt;&lt;a href=&#34;#fn:8&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;8&lt;/a&gt;&lt;/sup&gt;;
Multi-access Edge Computing&lt;sup id=&#34;fnref:9&#34;&gt;&lt;a href=&#34;#fn:9&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;9&lt;/a&gt;&lt;/sup&gt;）
やんないと，この分野もクラウド事業者がリージョン増やしたりして
ネットワークエッジに計算機いっぱい置いちゃいそう（もう置いてる？）．
あとそろそろ IoT もトップダウンで技術レベルに落として議論したいですよね．
雲とセンサとスマホがでかい矢印でつながったポンチ絵描いてるだけだと
なにも進まないし．インターネット ≠ WEB でしょうし，WEB 以外の
インターネットの使い方を探したいです
（探している人おったら友達になりたい）．
新しいアーキテクチャといえば NDN（Named Data Networking）&lt;sup id=&#34;fnref:10&#34;&gt;&lt;a href=&#34;#fn:10&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;10&lt;/a&gt;&lt;/sup&gt;が
パッと浮かぶんですが，今どういう状況なんでしょうかね？
商用稼働までに時間がかかると思いますが，CDN 業務奪っちゃわないかと
思うんですが（そうではない？）．&lt;/p&gt;
&lt;h3 id=&#34;さいごに&#34;&gt;さいごに&lt;/h3&gt;
&lt;p&gt;WEB だけでも社会インフラになってきているわけで，それらを堅牢化していく
のはそういうものかなと思います（しかたないね）．とはいえネットワーク側と
エンド側がバランスよく，より賢く（高機能に）なっていく世界ががとても
すばらしいなとも思っています．&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Nick McKeown, Tom Anderson, Hari Balakrishnan, Guru Parulkar, Larry Peterson, Jennifer Rexford, Scott Shenker, and Jonathan Turner. 2008. OpenFlow: enabling innovation in campus networks. SIGCOMM Comput. Commun. Rev. 38, 2 (March 2008), 69-74. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Pat Bosshart, Dan Daly, Glen Gibb, Martin Izzard, Nick McKeown, Jennifer Rexford, Cole Schlesinger, Dan Talayco, Amin Vahdat, George Varghese, and David Walker. 2014. P4: programming protocol-independent packet processors. SIGCOMM Comput. Commun. Rev. 44, 3 (July 2014), 87-95. &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://datatracker.ietf.org/doc/draft-filsfils-spring-srv6-network-programming/&#34;&gt;IETF Datatracker | draft-filsfils-spring-srv6-network-programming-07 - SRv6 Network Programming&lt;/a&gt; &lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://datatracker.ietf.org/wg/sfc/about/&#34;&gt;IETF Datatracker | Service Function Chaining (sfc)&lt;/a&gt; &lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:5&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://datatracker.ietf.org/wg/quic/documents/&#34;&gt;IETF Datatracker | QUIC (quic)&lt;/a&gt; &lt;a href=&#34;#fnref:5&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:6&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.iij.ad.jp/dev/report/iir/pdf/iir_vol40_report.pdf&#34;&gt;Internet Infrastructure Review Vol.40 - 定期観測レポート&lt;/a&gt; &lt;a href=&#34;#fnref:6&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:7&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://datatracker.ietf.org/doc/rfc8484/&#34;&gt;IETF Datatracker | RFC 8484 - DNS Queries over HTTPS (DoH)&lt;/a&gt; &lt;a href=&#34;#fnref:7&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:8&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Yun Chao Hu, Milan Patel, Dario Sabella, Nurit Sprecher, and Valerie Young. Mobile Edge Computing A key technology towards 5G. ETSI White Paper 11, September 2015. Also available at &lt;a href=&#34;http://www.etsi.org/images/files/ETSIWhitePapers/etsi_wp11_mec_a_key_technology_towards_5g.pdf&#34;&gt;here&lt;/a&gt; &lt;a href=&#34;#fnref:8&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:9&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Alex Reznik, Rohit Arora, Mark Cannon, Luca Cominardi, Walter Featherstone, Rui Frazao, Fabio Giust, Sami Kekki, Alice Li, Dario Sabella, Charles Turyagyenda, and Zhou Zheng. Develop- ing Software for Multi-Access Edge Computing. ETSI White Paper 20, September 2017. Also available at &lt;a href=&#34;https://www.etsi.org/images/files/ETSIWhitePapers/etsi_wp20_MEC_SoftwareDevelopment_FINAL.pdf&#34;&gt;here&lt;/a&gt; &lt;a href=&#34;#fnref:9&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:10&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://named-data.net&#34;&gt;Named Data Networking (NDN) - A Future Internet Architecture&lt;/a&gt; &lt;a href=&#34;#fnref:10&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
       </item>
       
       <item>
         <title>Talk at Turing Complete FM Meetup</title>
         <link>https://negli0.github.io/posts/talk-at-tcfm-meetup/</link>
         <pubDate>Tue, 26 Jun 2018 17:46:54 +0900</pubDate>
         
         <guid>https://negli0.github.io/posts/talk-at-tcfm-meetup/</guid>
         <description>&lt;h2 id=&#34;turing-complete-fm-とは&#34;&gt;Turing Complete FM とは&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://turingcomplete.fm&#34;&gt;Turing Complete FM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/rui314&#34;&gt;Rui Ueyama&lt;/a&gt; さんによるプログラミングについてのポッドキャストです．
毎回ゲストを招いて，プログラミングに関するあれこれを Rui
さんとゲストが喋っていく形式になっています．&lt;/p&gt;
&lt;p&gt;ほとんどの回が高度すぎるので，半分理解できたらまあいいほうです．
よくわかんないけど，すごそう，面白そうという気持ちは大事にしたいです．&lt;/p&gt;
&lt;p&gt;もうちょっというと，自分が知らなかった話を楽しそうに話されているとなんだか
「ぐぬぬ，面白さがわからん！勉強だ！！」となるのでなんか知らんが頑張ろうという気になります．&lt;/p&gt;
&lt;h2 id=&#34;tcfm-meetup&#34;&gt;TCFM Meetup&lt;/h2&gt;
&lt;h4 id=&#34;参加応募の殺到&#34;&gt;参加応募の殺到&lt;/h4&gt;
&lt;p&gt;Rui さんの「TCFM，ミートアップ的なことしてもいいかも？」というツイートがきっかけで
開催が決定しました．&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;今月24日からの週、一週間日本行くんですけど &lt;a href=&#34;https://twitter.com/hashtag/tcfm?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#tcfm&lt;/a&gt; ミートアップ的なのしてもいいかも？&lt;/p&gt;&amp;mdash; Rui Ueyama (@rui314) &lt;a href=&#34;https://twitter.com/rui314/status/1007255390025740289?ref_src=twsrc%5Etfw&#34;&gt;June 14, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;p&gt;そしてあれよあれよという間に応募が殺到し，当日は
110 人が来場することになりました．募集開始が 6/21 でミートアップ当日が 6/25
という短い募集期間だったにもかかわらずこれだけの人が集まるとは&amp;hellip;&lt;/p&gt;
&lt;p&gt;実際のポッドキャスト視聴者は一体何人なんでしょうか．&lt;/p&gt;
&lt;h4 id=&#34;lt-枠への応募&#34;&gt;LT 枠への応募&lt;/h4&gt;
&lt;p&gt;募集のページを開いたら LT 枠があって，学生は学生で応募できるようになっていました．
TCFM ポッドキャストを聞く人は，なにか技術的に得意なことを持っている人がほとんどだと
思うので，そういった人たちの前で発表するのは結構勇気がいりそうですよね．&lt;/p&gt;
&lt;p&gt;私はといえば「やっべ，こんなん怖いじゃん（応募ボタンぽち〜）」のような感じで気づいたら
応募していました．&lt;/p&gt;
&lt;p&gt;多分大きく理由は2つあって，&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;無名の研究者(私)がすごいエンジニア達の前で発表できる機会は極めて貴重&lt;/li&gt;
&lt;li&gt;そのようなすごい人達に自分の話を聞いてもらいたい&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;という気持ちが恐れに勝ったのだと思います．&lt;/p&gt;
&lt;p&gt;で，結果的に発表して大正解だったので，衝動に身を任せて本当に良かった！
勢い大事！&lt;/p&gt;
&lt;h4 id=&#34;発表内容&#34;&gt;発表内容&lt;/h4&gt;
&lt;p&gt;私が発表したのは他の発表者と異なり，少々アカデミア寄りの内容です．L4 End-to-End
が限界な一方，ミドルボックスを取り除くのは現実的ではないので，高機能通信路を
End-to-End で提供するために階層を1つ追加しよう，みたいな話です．&lt;/p&gt;
&lt;p&gt;発表資料はコレです．&lt;/p&gt;


&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;4252dfd6913246d3aa571607e79eb93a&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;本当は前日から実験を回していて，当日はとれたての実験データを公開するつもりだった
のですが，思いの外手こずりデータ収集に失敗しました．&lt;/p&gt;
&lt;p&gt;発表は 8 分だったのですが，8 分で何かを伝えるのは非常に難しいことがわかりました．
当日喋ってない内容はそのうちブログのエントリで出せたらなと思います．&lt;/p&gt;
&lt;p&gt;TCFM ポッドキャストでは今の所ネットワークの内容にあまりフォーカスされないので，
自分の発表がウケるか非常に不安でした．&lt;/p&gt;
&lt;p&gt;あと，事前に Rui さんに資料を共有し忘れていて，Dropbox の URL
を自分で直打ちする自体を招いてしまいました．スムーズな進行の妨げになることは
避けたいです，失礼いたしました．&lt;/p&gt;
&lt;h5 id=&#34;url-直打ち&#34;&gt;URL 直打ち&lt;/h5&gt;
&lt;p&gt;Dropbox の URL を直打ちしたら一発で通ったのがややウケした．&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;dropboxのURL一発入力すごい &lt;a href=&#34;https://twitter.com/hashtag/tcfm?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#tcfm&lt;/a&gt;&lt;/p&gt;&amp;mdash; みすど (@MysticDoll) &lt;a href=&#34;https://twitter.com/MysticDoll/status/1011202225123651585?ref_src=twsrc%5Etfw&#34;&gt;June 25, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;h4 id=&#34;発表後と懇親会&#34;&gt;発表後と懇親会&lt;/h4&gt;
&lt;p&gt;時系列が前後しますが，発表は結構好評で，懇親会でたくさん話しかけてもらいました．
ネットワーク系の方々とアカデミアの発表の場以外で話せるのは楽しかったです．
&lt;!-- raw HTML omitted --&gt;発表はしてみるものだなと思いました．&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Rui さんと直接お話できました．「日本の大学生はもっとCSを詰め込む勉強をしたほうがいい」
とおっしゃっていたのが印象的でした．これはアメリカのトップ校に通われている方の言葉だなと．&lt;/p&gt;
&lt;h3 id=&#34;その他の-lt-枠&#34;&gt;その他の LT 枠&lt;/h3&gt;
&lt;p&gt;非常に濃かったです．&lt;/p&gt;
&lt;h4 id=&#34;shinh-さんカジュアルに実行時リンクロードする&#34;&gt;shinh さん「カジュアルに実行時リンク&amp;amp;ロードする」&lt;/h4&gt;
&lt;p&gt;スライドは→&lt;a href=&#34;http://shinh.skr.jp/slide/dynload/000.html&#34;&gt;こちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;難しそうに思えるが，ちょっとした実験をするときに有用なことがある．適当に事例を紹介します．といった話．&lt;/p&gt;
&lt;p&gt;(コメントできない&amp;hellip;スライド読んで勉強します&amp;hellip;)&lt;/p&gt;
&lt;p&gt;「メモリにぺたっと貼り付けるとなんか動く」とか「適当なアドレスに関数ポインタを代入」とか，さらっとレベルの高いことをおっしゃっていました．
私は低レイヤが特別得意なわけではないので精進するんだ&amp;hellip;&lt;/p&gt;
&lt;h4 id=&#34;nsasaki128-さん無理数時計作ってみた&#34;&gt;nsasaki128 さん「無理数時計作ってみた」&lt;/h4&gt;
&lt;p&gt;発表にあったハッカソンで開発された「無理数時計」は
→ &lt;a href=&#34;https://hyurumi.github.io/MuriSuDokei/&#34;&gt;こちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;「時間→数字→無理数」でしょ，という発送でで無理数に現れる数値で時刻を
表現するという大変ぶっとんだ代物（褒め言葉）でした．数学的に面白いことができるのはとてもうらやましい．数学やんなきゃ．&lt;/p&gt;
&lt;p&gt;普通に実装したのでは文字列探索の計算量が大きくて使いものにならなかったそうです．
そこで，このプログラムに特化したアルゴリズムを設計して期待値を数学的に算出します．その後アルゴリズムを実装して計算量を削減，期待値に近い実行時間を示した，という発表でした．&lt;/p&gt;
&lt;p&gt;すばらしいなと思ったのは，XXというアルゴリズムはどの程度の計算量の削減が望めるのかを数学的に検証してから実装している点です．
この手順は私も見習いたいと思いました．&lt;/p&gt;
&lt;h4 id=&#34;retrage01-さんwip-porting-lkl-to-bitvisor&#34;&gt;retrage01 さん「[WIP] Porting LKL to BitVisor」&lt;/h4&gt;
&lt;p&gt;Linux Kernel Library (LKL) を BitVisor に移植するというプロジェクト．&lt;/p&gt;
&lt;p&gt;発表資料はこちら．


&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;ae844998599b4cdaa563edd541ff22ee&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;LKL はコンパイルすると &lt;code&gt;liblkl.so&lt;/code&gt; のようなものが生成され，Linux カーネルをライブラリとして扱えるプロジェクトです．
モチベーションは「面白そうだから」．libc のような便利なものが無い環境で
動作させるので，まずは timer, thread, semaphore, mutex, file read/write が必要．&lt;/p&gt;
&lt;p&gt;現在 LKL のビルドは通っている状態で， BitVisor への統合だけは完了しているそうです．BitVisor のビルドシステムに LKL を組み込むのが大変そうだとか．&lt;/p&gt;
&lt;h4 id=&#34;inada-naoki-さんcompact-pygc_head&#34;&gt;Inada Naoki さん「Compact PyGC_Head」&lt;/h4&gt;
&lt;p&gt;発表資料はこちら


&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;b77d551e19fe4d839d4a39dc924eddb8&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;Python の GC がどのように実装されてるのかの話から，ヘッダ部分の使用メモリ量を改善する話．
私が GC の話に全く詳しくないのでコメントできない&amp;hellip;つらい&amp;hellip;&lt;/p&gt;
&lt;p&gt;32bit システムと 64bit システムとではポインタサイズが違い，参照カウントに必要な
3bit が 32bit システムでは用意できない，さてどうしようと．Rui さんが 「世の中 64
bit が当たり前になってきているので 32bit を切り捨てるというのもあるのでは？」と
コメントしていました．&lt;/p&gt;
&lt;p&gt;Rui さんが「GC のバグは全部つらいバグ」って言っていたのが印象的でした．&lt;/p&gt;
&lt;h4 id=&#34;κeen-さんgc-と-1bitの話&#34;&gt;κeen さん「GC と 1bitの話」&lt;/h4&gt;
&lt;p&gt;発表資料は→&lt;a href=&#34;http://keens.github.io/slide/gcto1bit/&#34;&gt;こちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;連続して GC の話です．またしても技術的な話が全くわからずつらい&amp;hellip;
オブジェクトのフィールドをポインタと値に分けて格納し，ポインタをオブジェクトポインタの
前に，値をオブジェクトポインタの後にそれぞれ置くと物理で 1bit も使わずに
情報を保持できる双方向レイアウトの話がありましたが，これ他のところでも使えそうだ
と思いました．そこまで情報量を削減する必要がある場面が他にあるかは私にはわからないですが&amp;hellip;&lt;/p&gt;
&lt;p&gt;κeen さんが発表中に Rui さんに「これって TCFM で話されていましたよね？」と聞いているのが面白かったです．いい雰囲気でした．&lt;/p&gt;
&lt;h3 id=&#34;パネルディスカッション&#34;&gt;パネルディスカッション&lt;/h3&gt;
&lt;p&gt;パネルディスカッションは出演者へ質問ができるコーナーで，インタラクティブに
進みました．&lt;/p&gt;
&lt;p&gt;togetter でいい感じにまとめられています．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://togetter.com/li/1241054&#34;&gt;Turing Complete FMミートアップ ツイートまとめ 2018/06/25開催 #tcfm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;印象的だったものを書きます．&lt;/p&gt;
&lt;h5 id=&#34;csの勉強はどうやってやるのか&#34;&gt;CSの勉強はどうやってやるのか？&lt;/h5&gt;
&lt;p&gt;本を読むというのが王道っぽいです．Rui さんは一冊読むのに非常に時間を掛けるのだとか．さらにるくすさんは分厚い本も通しで読むらしく，るくすさんが多方面に詳しいことと辻褄が合う，ということをおっしゃっていました．
hikalium さんは技術書だけではなく小説も読むということで，読む速度が身についていることが幸いしているともおっしゃっていました．&lt;/p&gt;
&lt;h5 id=&#34;僕が面白いと思うものはみなさんも面白いと思う&#34;&gt;僕が面白いと思うものはみなさんも面白いと思う&lt;/h5&gt;
&lt;p&gt;Ruiさんの発言です．
コンテンツをどうやって決めているのかという文脈だったと思います．
番組プロデューサーとしての感性は信じていいものだとおっしゃっていました．&lt;/p&gt;
&lt;h3 id=&#34;まとめ&#34;&gt;まとめ&lt;/h3&gt;
&lt;p&gt;CS分野1つをとってもまだまだ私の知らないことはいっぱいあるのだな〜と．
あと，勢いで発表して本当によかった．Rui さんをはじめ，関係者のみなさま，ありがとうございました．&lt;/p&gt;
&lt;p&gt;機会があればまた発表したいな．&lt;/p&gt;
</description>
       </item>
       
       <item>
         <title>Intruducing Enhanced Communication Paths over Layer-4 (Multipath)</title>
         <link>https://negli0.github.io/posts/rich-paths/</link>
         <pubDate>Thu, 07 Jun 2018 01:24:15 +0900</pubDate>
         
         <guid>https://negli0.github.io/posts/rich-paths/</guid>
         <description>&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;
&lt;p&gt;インターネットが発展するにつれて，アプリケーションが多様化してきました．
多様化したアプリケーションはネットワークに&lt;strong&gt;高機能性&lt;/strong&gt;を要求します．
本記事で述べる「高機能性」とは，マルチパス，耐遅延性ネットワーク，ミドルボックスを
用いた通信路のようなものを指します．&lt;!-- raw HTML omitted --&gt;本記事の目的は，こうした高機能な通信路のモデル
を具体例を用いながら紹介し，通信路のモデルの整理をする&lt;!-- raw HTML omitted --&gt;ことにあります．&lt;/p&gt;
&lt;p&gt;研究紹介のカテゴリにしておきながら，今回はあまり踏み込んだ話はしません．
前提知識はあまり必要としませんが，TCP/IP の基本的な仕組みを知っていると尚良いと思います．&lt;/p&gt;
&lt;h4 id=&#34;おことわり&#34;&gt;おことわり&lt;/h4&gt;
&lt;p&gt;本当はマルチパス以外も書きたかったのですが，長くなりすぎるので今回はマルチパスだけです．
（マルチパスだけでも長い&amp;hellip;）&lt;/p&gt;
&lt;h2 id=&#34;高機能通信路&#34;&gt;高機能通信路&lt;/h2&gt;
&lt;p&gt;本記事では，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通常のTCP/UDPでは提供が困難な機能を持つ Layer-4（OSI参照モデル）以上の通信路&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;のことを高機能通信路（Enhanced Communication Paths / Highly Functional Communication Paths）&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;
と呼ぶことにします．特に断りがない限り，階層はOSI参照モデルにおけるものを指します．つまり Layer-4（L4）
という記述は OSI 参照モデルのトランスポート層を指し，L7と言ったら OSI 参照モデルの
アプリケーション層を指します．&lt;/p&gt;
&lt;p&gt;高機能通信路のモデルとして紹介するのは以下の3つです．&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;マルチパス&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;耐遅延性ネットワーク（Delay/Disruption Tolerant Networking; DTN）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ミドルボックスを用いた通信路（ミドルボックス通信路）&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;それぞれ通信路の使い手（多くの場合上位プロトコル，つまりL7）に以下のような高機能性を提供します．&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;マルチパス&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;DTN&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;ミドルボックス通信路&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;耐障害性，帯域集約&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;対遅延性，対間欠性&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;中継地，ポリシ適用&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id=&#34;余談プロトコルと階層構造における位置付け&#34;&gt;余談：プロトコルと階層構造における位置付け&lt;/h5&gt;
&lt;p&gt;ここで &amp;ldquo;OSI参照モデル&amp;rdquo; と明記している理由は，プロトコルとその位置付けに絶対は無いからです．
そのため，XXというプロトコルは OSI参照モデルでいうと第N層だよね，TCP/IP プロトコルスイート&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; でいうと第M層だよね，
というような言い方が個人的には適切かと思います．大抵の場合は開発者や文書の著者が第X層に位置すると言います，
IETFに関しては，以下のような記述が Wikipedia にありますね．（一次ソースが発見できませんでしたが）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;IETFは7層からなるOSI参照モデルに従うような試みはせず、また標準化過程 (Standards Track) にあるプロトコル仕様やその他の構造上の文書をOSI参照モデルに対して参照する事もしない。&amp;hellip;（中略）&amp;hellip;  IETFは再三にわたりインターネット・プロトコルと構造の開発はOSI参照モデルに準拠する事は意図しないという事を述べている。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%8D%E3%83%83%E3%83%88%E3%83%BB%E3%83%97%E3%83%AD%E3%83%88%E3%82%B3%E3%83%AB%E3%83%BB%E3%82%B9%E3%82%A4%E3%83%BC%E3%83%88&#34;&gt;インターネット・プロトコル・スイート - Wikipedia&lt;/a&gt; より（2018/06/07 時点で確認）&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;階層化の目的や思想ついてはまた別のエントリで書くとます．
ここではタネンバウム先生の本から階層化の目的について引用させていただきます．&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;時間とともにネットワークは大きくなり，新しい設計が出現して既存のネットワークと接続する必要性が生じる。 我々は，変化を支援するために用いられる重要な構造手法，すなわち問題全体を分割し，実装の詳細を隠すプロトコル階層化（protocol layering）を先に述べた。他にも多くの戦略がある。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;a href=&#34;https://www.amazon.co.jp/%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%82%BF%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF-%E7%AC%AC5%E7%89%88-%E3%82%A2%E3%83%B3%E3%83%89%E3%83%AA%E3%83%A5%E3%83%BC%E3%83%BBS%E3%83%BB%E3%82%BF%E3%83%8D%E3%83%B3%E3%83%90%E3%82%A6%E3%83%A0-ebook/dp/B076HJDZHQ/ref=sr_1_1?ie=UTF8&amp;amp;qid=1528368745&amp;amp;sr=8-1&amp;amp;keywords=%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%82%BF%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF&#34;&gt;アンドリュー・S・タネンバウム; デイビッド・S・ウエザロール. コンピュータネットワーク 第5版&lt;/a&gt; (Kindle の位置No.1176-1179). 日経BP社. Kindle 版. &lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;マルチパス&#34;&gt;マルチパス&lt;/h3&gt;
&lt;p&gt;一般的にマルチパス通信路は，使い手が複数の通信路を扱える通信路のことです．
上位層（L7）に提供されるのは帯域集約と耐障害性です．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;耐障害性(Failt Tolerance)： 通信路のうちのひとつが遮断されても通信を継続する
帯域集約(Bandwidth Aggregation)： 複数の通信路を束ねてスループットを高める
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;L4 以上のマルチパス通信路として代表的なものに Stream Control Transmission Protocol（SCTP）&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;
と Multipath TCP（MPTCP）&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;，最近では Multipath QUIC（MPQUIC）&lt;sup id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt; があります．
この3つを紹介します．&lt;/p&gt;
&lt;h4 id=&#34;stream-control-transmission-protocol-sctp&#34;&gt;Stream Control Transmission Protocol (SCTP)&lt;/h4&gt;
&lt;p&gt;高機能性の説明に入る前に，SCTP の基本的な考え方を説明します．図1にSCTPの通信の概念図を示します．
&lt;figure class=&#34;center&#34;&gt;
    &lt;img src=&#34;https://negli0.github.io/img/sctp-assoc.png&#34;/&gt; &lt;figcaption&gt;
            &lt;h4&gt;図1. Communication Concept of SCTP&lt;/h4&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Association：SCTP の通信路の単位．ひとつ以上の stream から構成される．&lt;/li&gt;
&lt;li&gt;stream：Association 内の独立した論理的なチャネル．&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SCTP では，Association という単位で相手（Peer）と通信路を確立します．Association 確立時に，
この Association 内で使用したい stream の数と使用可能な IP アドレスのリストを交換し合います．
エンドホストはひとつ以上の IP アドレスを持っていればひとつのポート番号で SCTP Association を確立できます．
stream は Association に独立して属するだけで，実際に通信路を確立するわけではありません．&lt;/p&gt;
&lt;p&gt;SCTP では，TCP とは異なりメッセージ単位でデータを扱います．
上位層は，用途に応じて stream を指定できます．例えば，制御メッセージを stream 0 に，
画像データを stream 1 に，それぞれ指定して送受信できます．
このように，ひとつの通信路の中に小さい通信路がいくつも存在するかのような通信をマルチストリームと呼びます．
SCTP のマルチストリーミングは Head-of-Line Blocking（HoL Blocking）が発生しない点でも優れています．&lt;/p&gt;
&lt;p&gt;WebRTC の DataChannel には ユーザ空間で SCTP (over UDP) が採用されています．
このような記述を見つけましたし，将来的には QUIC に置き換わるのでしょう．&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SCTP is used in WebRTC for the implementation and delivery of the Data Channel. Google is experimenting with the QUIC protocol as a future replacement to SCTP.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;a href=&#34;https://webrtcglossary.com/sctp/&#34;&gt;SCTP - WebRTC Glossary&lt;/a&gt; より (2018/06/07 時点で確認)&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h5 id=&#34;耐障害性&#34;&gt;耐障害性&lt;/h5&gt;
&lt;p&gt;SCTP は，エンドホストが複数のエンドポイント（ほとんどの場合 IP アドレス）
を持つマルチホーム環境をサポートします（図2）．
&lt;figure class=&#34;center&#34;&gt;
    &lt;img src=&#34;https://negli0.github.io/img/mh-sctp.png&#34;/&gt; &lt;figcaption&gt;
            &lt;h4&gt;図2. Multi-homed SCTP&lt;/h4&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

SCTP には &lt;!-- raw HTML omitted --&gt;Primary/Secondary Path&lt;!-- raw HTML omitted --&gt; という概念があります．ひとつの Association には，複数の
IP アドレスを紐付かせることができます．
両エンドホストは Association 確立時に使用可能な IP アドレスのリストを交換しているので，互いの
IP アドレスからの疎通性を確認できます．これにより，Association 内に IP
アドレスと紐づく通信路（Path）を認識できます．標準的な SCTP では，複数の Path
が存在する場合，ひとつを Primary Path としてデータ転送に使用し，残りを Secondary Path
として待機させます．
SCTP では，Path ごとに定期的に Heartbeat をやり取りして障害を検知します．&lt;/p&gt;
&lt;p&gt;マルチホームな SCTP では，Primary Path に障害が発生した場合，上位層に透過的に Secondary
Path に切り替えて通信を継続します（failover といいます）．これが SCTP の耐障害性です．&lt;/p&gt;
&lt;h5 id=&#34;帯域集約&#34;&gt;帯域集約&lt;/h5&gt;
&lt;p&gt;標準的な SCTP には帯域集約は存在しませんが，Concurrent
Multipath Transfer（CMT）&lt;sup id=&#34;fnref:6&#34;&gt;&lt;a href=&#34;#fn:6&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;6&lt;/a&gt;&lt;/sup&gt; という拡張が存在します．CMT-SCTP では，複数の
Path が存在する状況で同時に（simultaneously）それらを使用します．&lt;/p&gt;
&lt;p&gt;少し話が逸れますが，マルチパス通信，特に帯域集約を効率的に実施するのは意外と難しいです．
一般的に，パス間の輻輳制御や再送などがシングルパスのそれよりも複雑になります．&lt;/p&gt;
&lt;h4 id=&#34;multipath-tcp-mptcp&#34;&gt;Multipath TCP (MPTCP)&lt;/h4&gt;
&lt;p&gt;MPTCP&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; は TCP コネクションを L4 内で多重化して資源利用率を高め，冗長性を高めることを目的とします．
&lt;figure class=&#34;center&#34;&gt;
    &lt;img src=&#34;https://negli0.github.io/img/mh-mptcp.png&#34;/&gt; &lt;figcaption&gt;
            &lt;h4&gt;図3. MPTCP with 4 subflows (fullmesh)&lt;/h4&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

図3に示すように MPTCP では最大で ||src IP|| × ||dst IP|| 個の異なる経路の Path を
保持します．この Path を subflow といいます．&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;center&#34;&gt;
    &lt;img src=&#34;https://negli0.github.io/img/mptcp.png&#34;/&gt; &lt;figcaption&gt;
            &lt;h4&gt;図4. Structure of MPTCP&lt;/h4&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

また図4に示すように，上位層からは通常のソケットAPIで TCP のように操作ができ，
下位層（L3）では subflow，つまり通常の TCP コネクションとして見えます．MPTCP は，
特別な操作を抜き&lt;sup id=&#34;fnref:7&#34;&gt;&lt;a href=&#34;#fn:7&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;7&lt;/a&gt;&lt;/sup&gt; に上位層に TCP を束ねた通信路を提供します．&lt;/p&gt;
&lt;p&gt;TCP とアプリケーションの間に位置するので L5（L6？）のようにみえるかもしれませんが，
MPTCP は 通常の TCP の動作する領域を出ない範囲で機能していると見えます．このことから
MPTCP は L4 に位置するものとして解釈しています．&lt;/p&gt;
&lt;p&gt;Linux MPTCP Project&lt;sup id=&#34;fnref:8&#34;&gt;&lt;a href=&#34;#fn:8&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;8&lt;/a&gt;&lt;/sup&gt; のページによれば，MPTCP では以下の設定を変更することで
Path の扱い方を決めることができます．今回は詳細を省きますが，詳しい人は設定値の名前からなんとなく動作が把握できると思います．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;path-manager: default, fullmesh, ndiffports, binder から選択
scheduler: default, roundrobin, redundant から選択
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&#34;耐障害性-1&#34;&gt;耐障害性&lt;/h5&gt;
&lt;p&gt;MPTCP では，Path は subflow という概念（実体は TCP コネクション）で存在します．
MPTCP コネクション内のすべての subflow が切断された場合に，MPTCPコネクションが切断されます．
また，scheduler を redundant に設定すると，すべての subflow が同じデータを運ぶ
（冗長）ようになります．いずれかの subflow からデータが届けば良いので，重複したデータは
MPTCP で破棄します．
これらが MPTCP の耐障害性です．&lt;/p&gt;
&lt;p&gt;スケジューラは，Retransmission TimeOut (RTO) に直面したパスは潜在的にダウンした（potentially failed）
とみなして別のパスを使うようになっているようです．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/multipath-tcp/mptcp/pull/70&#34;&gt;mptcp: sched: Improve active/backup subflow selection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;帯域集約-1&#34;&gt;帯域集約&lt;/h5&gt;
&lt;p&gt;MPTCP では，scheduler の設定に従って subflow を同時に使って帯域集約をします．
例えば roundrobin の場合は subflow を一回ずつ変えながらデータを送信します．
subflow ごとに輻輳制御が働くので，MPTCP 全体で効率的に輻輳制御をするのは複雑になります．
SCTP と異なり，標準の MPTCP は上位層からはシングルパス TCP として見えるので，subflow
を指定した送信はできません．このため，HoL Blocking も発生します．&lt;/p&gt;
&lt;p&gt;記事を書くためにいろいろ調べていたら，MPTCP 用にソケット API
を拡張するといった論文&lt;sup id=&#34;fnref:9&#34;&gt;&lt;a href=&#34;#fn:9&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;9&lt;/a&gt;&lt;/sup&gt; を見つけました．この論文では subflow を扱える API を設計，実装しています．&lt;/p&gt;
&lt;p&gt;MPTCP のパススケジューリングのアルゴリズムに関する研究はよく目にします．&lt;/p&gt;
&lt;h3 id=&#34;multipath-quic-mpquic&#34;&gt;Multipath QUIC (MPQUIC)&lt;/h3&gt;
&lt;p&gt;MPQUIC は，2018年5月現在 IETF で標準化が進められている&lt;sup id=&#34;fnref:10&#34;&gt;&lt;a href=&#34;#fn:10&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;10&lt;/a&gt;&lt;/sup&gt;比較的新しいプロトコルです．
2017年には，ネットワーク系の一流国際会議である ACM CoNEXT 2017 で MPQUIC
に関する論文&lt;sup id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt; が発表されました．ラストオーサーは先程紹介した MPTCP の拡張
API に関する論文&lt;sup id=&#34;fnref:9&#34;&gt;&lt;a href=&#34;#fn:9&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;9&lt;/a&gt;&lt;/sup&gt; の方と同じですね．&lt;/p&gt;
&lt;p&gt;(2018/06/09 追記)&lt;br&gt;
QUIC の標準化に携わっている Oku Kazuho さんから，QUIC
のマルチパス化は「まだ」取り組まれていないとコメントをいただきました．失礼いたしました．
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;良記事。なお、IETFではQUICはトランスポート層の取組として位置づけられていて、のマルチパス化には「まだ」取り組んでいません / “Intruducing Enhanced Communication Paths over …” &lt;a href=&#34;https://t.co/ESxL97mzXd&#34;&gt;https://t.co/ESxL97mzXd&lt;/a&gt;&lt;/p&gt;&amp;mdash; Kazuho Oku (@kazuho) &lt;a href=&#34;https://twitter.com/kazuho/status/1005379838608211968?ref_src=twsrc%5Etfw&#34;&gt;June 9, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

正確な情報ありがとうございます．（追記終わり）&lt;/p&gt;
&lt;h4 id=&#34;quic-quick-udp-internet-connections&#34;&gt;QUIC (Quick UDP Internet Connections)&lt;/h4&gt;
&lt;p&gt;MPQUIC の説明をするために QUIC の説明をします．
注目度の高さからか，大変勉強になる記事が多いです，ありがとうございます．
以下の記事を参考に，かい摘んで説明します．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://postd.cc/googles-quic-protocol-moving-web-tcp-udp/&#34;&gt;GoogleのQUICプロトコル：TCPからUDPへWebを移行する | POSTD&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;QUIC は元々 Google 社が考案した connection-oriented なプロトコルで，HTTP のメッセージを高速に安全に転送することを目的としています．
2014 年以降，Chrome で試験的に使用されています．また，IETF でも標準化が進められており，
前者を gQUIC 後者を iQUIC と呼ぶこともあります．お互い要素を取り込み合ったりしているのですが，
細かい部分では仕様が異なるようです．
Google Chrome からこの URL（ &lt;a href=&#34;chrome://net-internals&#34;&gt;chrome://net-internals&lt;/a&gt;）を叩くと QUIC や HTTP/2 のセッション情報がモニタリングできます．&lt;/p&gt;
&lt;p&gt;私はあまり標準化を追っていないので標準化に関する詳しい話はできません．
標準化に関しては，以下の記事が大変参考になりました，ありがとうございます．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/flano_yuki/items/251a350b4f8a31de47f5&#34;&gt;QUICの現状確認をしたい（2018/1）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://asnokaze.hatenablog.com/entry/2018/02/06/004539&#34;&gt;QUICの現状確認をしたい 2018 /2 (MTU, Migration, Packet Number Encryptionなど) - ASnoKaze blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下に QUIC の主な特徴を示します．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;UDP の上位で動作&lt;/strong&gt;：通信路確立時間の短縮&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TCP のような輻輳制御アルゴリズムを提供&lt;/strong&gt;：公平性の確保&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;セッション管理&lt;/strong&gt;：L3 ハンドオーバ時の遅延削減&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ペイロードだけではなく制御情報もほとんど暗号化可能&lt;/strong&gt;：情報保護&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;前方誤り訂正（Forward Error Correction; FEC）付与&lt;/strong&gt;：再送抑制&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ユーザ空間実装&lt;/strong&gt;：開発，デプロイの高速化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このように非常に高機能です．
論文に関しては，2017年，ネットワーク系のトップカンファレンスである ACM
SIGCOMM で発表された論文&lt;sup id=&#34;fnref:11&#34;&gt;&lt;a href=&#34;#fn:11&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;11&lt;/a&gt;&lt;/sup&gt; がおそらく初めてだと思われます．&lt;/p&gt;
&lt;p&gt;この論文，著者の順番がアルファベット順になっていることに何か意図があるんでしょうかね．&lt;/p&gt;
&lt;p&gt;論文中ではインターネットトラフィックの 7% が QUIC によるものと推定する&lt;sup id=&#34;fnref:11&#34;&gt;&lt;a href=&#34;#fn:11&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;11&lt;/a&gt;&lt;/sup&gt;とあります．
下記ツイートのように，QUIC のトラフィックシェアも上がってきているようで本当にすごいです．
こんな複雑なプロトコルがインターネット規模でスケールして動作していることに驚愕です．
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;The number of QUIC-capable IPs and support for sets of certain QUIC versions has grown since its release over 5 years ago. Read more about the reach of &lt;a href=&#34;https://twitter.com/hashtag/QUIC?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#QUIC&lt;/a&gt; on the Internet &lt;a href=&#34;https://t.co/65IGbH5SWx&#34;&gt;https://t.co/65IGbH5SWx&lt;/a&gt; &lt;a href=&#34;https://t.co/oXiSeiptfr&#34;&gt;pic.twitter.com/oXiSeiptfr&lt;/a&gt;&lt;/p&gt;&amp;mdash; APNIC (@apnic) &lt;a href=&#34;https://twitter.com/apnic/status/996378414754947073?ref_src=twsrc%5Etfw&#34;&gt;May 15, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;近年のQUICのトラフィックに関する分析。&lt;br&gt;- Akamaiが公式にQUICのrolloutをアナウンスする一週間前からIPv4ホストのQUICサポート: 急激に増加&lt;br&gt;- 今までQUICのトラフィックシェア: Googleが支配→Akamaiがこれを変えるかも？&lt;br&gt;- 大学のuplink: QUICのトラフィックが増えている(WIDE MAWIが分析協力) &lt;a href=&#34;https://t.co/ARwJWhnf7g&#34;&gt;https://t.co/ARwJWhnf7g&lt;/a&gt;&lt;/p&gt;&amp;mdash; ao (@6_break) &lt;a href=&#34;https://twitter.com/6_break/status/996384026540752896?ref_src=twsrc%5Etfw&#34;&gt;May 15, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;ところでみなさん，DCCP って覚えていますか？&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h5 id=&#34;quic-の位置付け&#34;&gt;QUIC の位置付け&lt;/h5&gt;
&lt;p&gt;私の研究分野がネットワークアーキテクチャであるので，この視点で見てしまいがちです．
図6 にプロトコルスタックにおける QUIC の位置付けを示します．
&lt;figure class=&#34;center&#34;&gt;
    &lt;img src=&#34;https://negli0.github.io/img/quic-stack.png&#34;/&gt; &lt;figcaption&gt;
            &lt;h4&gt;図6. Protocol Stack (QUIC)&lt;/h4&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;!-- raw HTML omitted --&gt; &lt;a href=&#34;https://datatracker.ietf.org/meeting/98/materials/slides-98-edu-sessf-quic-tutorial/&#34;&gt;https://datatracker.ietf.org/meeting/98/materials/slides-98-edu-sessf-quic-tutorial/&lt;/a&gt; より引用&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;一般に QUIC はトランスポート層プロトコルと言われています．はじめは UDP sublayer みたいな位置付けかと
思っていましたが，図6 のように UDP の上位で動作します．そして一部アプリケーション機能を提供します&lt;sup id=&#34;fnref:11&#34;&gt;&lt;a href=&#34;#fn:11&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;11&lt;/a&gt;&lt;/sup&gt;．&lt;/p&gt;
&lt;p&gt;ここで私の良くない病気が出ます．&lt;/p&gt;
&lt;p&gt;アプリケーション（HTTP？）機能を一部提供するのにトランスポート層プロトコルと言われてしまうと，
例えば OSI 参照モデルでは第何層に位置するのか，私はよくわからなくなってしまうのです．
こんなことを気にしてなんになるんだ&amp;hellip;？（でも気にする）
厳密に第何層かなんて実際に開発したり使用したりする上ではあまり気にする必要ないんですけどね．&lt;/p&gt;
&lt;p&gt;従来のトランスポート層プロトコルが担ってきたサービスをアプリケーションに提供しているという
意味ではトランスポート層プロトコルだと思いますが，一部アプリケーション機能も持っているため
L7 とも捉えることができると思います．個人的には L4 の機能を持った L7 がしっくり来ます．&lt;/p&gt;
&lt;p&gt;これに関して，MPQUIC の論文&lt;sup id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt; には以下のように書かれています．&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;QUIC is a recent proposal initiated by Google and embraced by many others that &lt;!-- raw HTML omitted --&gt;collapses the functions of the classical HTTP/2, TLS and TCP protocols into a single application layer protocol&lt;!-- raw HTML omitted --&gt; that runs over UDP.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;参考文献&lt;sup id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt; より抜粋&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;QUIC の論文&lt;sup id=&#34;fnref:11&#34;&gt;&lt;a href=&#34;#fn:11&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;11&lt;/a&gt;&lt;/sup&gt; では &amp;ldquo;Transport Layer Protocol&amp;rdquo; と言われています（どこに位置づくの）．
あと，しばしば SPDY(L7) とか HTTP/2(L7)
とかと同列で書かれたりしているのを見るとやっぱり L7 では？という気分になります．
元論文が &amp;ldquo;Transport Layer Protocol&amp;rdquo; だと言う以上，これからは HTTP/2 on QUIC とか，SPDY on TCP とか，
HTTP/2 on TCP とかいう言い方をしたほうがいいのだろうか（この書き方が厳密に正しいのかすら不明だが)．&lt;/p&gt;
&lt;p&gt;ところで L4=UDP で L7=QUIC+HTTP という解釈は？&lt;br&gt;
セッション管理もあるし L4=UDP，L5=QUIC，L7=HTTP とか？？&lt;br&gt;
いやいや他にｍ&lt;/p&gt;
&lt;p&gt;(病気終わり)&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;quic-のデータ転送&#34;&gt;QUIC のデータ転送&lt;/h4&gt;
&lt;p&gt;MPQUIC の説明に必要な QUIC の仕様を述べます．
QUIC パケットは，暗号化されていないヘッダ，暗号化された残りのヘッダ，及び Frame で構成されます．
暗号化されないヘッダ部分は以下の3つ．&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;フィールド&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Type&lt;/td&gt;
&lt;td&gt;Initial, Rety, Handshake, 0-RTT Protected 等の識別&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Connection ID (CID)&lt;/td&gt;
&lt;td&gt;コネクションの識別子&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Packet Number (PN)&lt;/td&gt;
&lt;td&gt;TCP でいうところのシーケンス番号&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;主な Frame の種類として&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Frame 名&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;STREAM&lt;/td&gt;
&lt;td&gt;CID 内に stream を作成，ストリームのデータの運搬&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ACK&lt;/td&gt;
&lt;td&gt;送信側にどのパケットが届いたのか通知&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CONNECTION_CLOSE&lt;/td&gt;
&lt;td&gt;コネクションを終了することを相手に通知&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RST_STREAM&lt;/td&gt;
&lt;td&gt;stream を突然終了&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;などがあります．
アプリケーションペイロードは STREAM Frame の StreamData というフィールドに格納されます．
輻輳検知などに用いる Round Trip Time 推定（RTT estimation）は，ACK Frame の ACK Delay
フィールドを使用します．&lt;/p&gt;
&lt;p&gt;論文を読みつつ，TCP と比較したときに最も興味深いのは，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;!-- raw HTML omitted --&gt;常に PN が増加し続ける&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ことでした．これにより再送の曖昧さ（ambiguity of multiple retransmission）
を回避できます．&lt;/p&gt;
&lt;p&gt;簡単に説明します．&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;受信側が受信状況からあるパケットがロスをしたと判断 (単に到着が遅れているだけかもしれない)&lt;/li&gt;
&lt;li&gt;受信側が再送要求&lt;/li&gt;
&lt;li&gt;受信側が当該データを受信&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;3 の時点で，TCP はそのデータが「単に遅れて到着した」パケットなのか
「再送要求して送られた」パケットなのか判断ができません．シーケンス番号が共通なので．
一方 QUIC では PN が増加し続けるので，時系列が容易に把握できます．TCP
よりも正確な RTT 推定が可能です．&lt;/p&gt;
&lt;p&gt;RTT 推定は Bufferbloat 問題の解決に役立ちます．Bufferbloat 問題は，実際には輻輳が発生していないのに
両エンドの輻輳制御アルゴリズムの性能を落とします．単純な仕組みですが，PN
が単調増加することのメリットは大きいように思えます．論文にも MPTCP
と比較してロスリカバリに長けていると書かれています&lt;sup id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;．&lt;/p&gt;
&lt;p&gt;また，シングルパスの TCP，QUIC では輻輳制御に CUBIC を用いています．
論文中では，MPTCP，MPQUIC には OLIA&lt;sup id=&#34;fnref:12&#34;&gt;&lt;a href=&#34;#fn:12&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;12&lt;/a&gt;&lt;/sup&gt; というスキームを用いています．CUBIC
は，マルチパスプロコトルの下では unfair な挙動をすることが知られています&lt;sup id=&#34;fnref:13&#34;&gt;&lt;a href=&#34;#fn:13&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;13&lt;/a&gt;&lt;/sup&gt;．&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;mpquic-における-path&#34;&gt;MPQUIC における Path&lt;/h4&gt;
&lt;p&gt;MPQUIC ではひとつのコネクション ID
の中に Path という概念を追加してマルチパスを実現します．暗号化されないヘッダ部分に
Path ID を含めることで Path を識別します．Path は IP アドレスにひも付きます．
IPv4, IPv6 の dual-stack ホストの場合，それぞれで Path を持ちえます．
STREAM Frame がどの Path（経路）を通っても関係なく受信側で
stream のデータ（アプリケーションペイロード）が復元されます．&lt;/p&gt;
&lt;p&gt;Path は Path Manager という部分で操作されます．
Path Manager は Path の作成と削除を担います．QUIC のハンドシェイク終了後，
両ホストでまずひとつの Path を開きます．あとは必要に応じて片方のホストが Path
を開きます．Path は UDP 上で実現されるため，Path を activate
するにはパケットをひとつ流すだけで済みます&lt;sup id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;．一方で MPTCP
では Path は TCP で実現されるため，Path ごとに 3-way handshake が必要になります．&lt;/p&gt;
&lt;p&gt;MPQUIC では以下の新たな Frame を用いて Path を操作します．&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Frame 名&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ADD_ADDRESS&lt;/td&gt;
&lt;td&gt;ホストのすべてのアドレスを交換&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PATH&lt;/td&gt;
&lt;td&gt;ホスト global な視点で Active な Path の性能を確認&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;ADD_ADDRESS Frame は SCTP のアドレスリスト交換や MPTCP の ADD_ADDR
シンボルに相当します．これにより各ホストで Path のエンドポイントを共有できます．
MPTCP の ADD_ADDR と異なり，Frame
は暗号化されるためセキュリティミドルボックスの影響を受けません．&lt;/p&gt;
&lt;p&gt;PATH Frame はホスト global な視点で Path の性能の統計情報を確認できます．&lt;/p&gt;
&lt;h5 id=&#34;耐障害性-2&#34;&gt;耐障害性&lt;/h5&gt;
&lt;p&gt;先述のように MPQUIC では PATH Frame を用いて Active な Path の性能を確認できます．
これは RTT 推定や slow な Path，急激に性能が劣化した Path
の検知に使用できます．これにより，複数インターフェイス（I/Fs) が存在するホスト
（dual-homing host） 上で SCTP ライクな failover を実現します．&lt;/p&gt;
&lt;h5 id=&#34;帯域集約-2&#34;&gt;帯域集約&lt;/h5&gt;
&lt;p&gt;先述のように，QUIC は UDP 上で動作するので TCP マルチストリーミングで発生する HoL
Blocking が発生しません．受信したら，stream 内で順番が揃っていれば上位層にパケットを渡せます．
この点で非常にマルチパス通信との相性が良いです．
ロスが発生した場合，MPTCP はミドルボックス対策で各パスに順番に再送しなくてはならないですが，MPQUIC
では Frame を同一 Path に送る必要がない点も異なります．&lt;/p&gt;
&lt;p&gt;個人的に MPQUICは SCTP と MPTCP にインスパイヤされていると思います．
SCTP よりも現代的なアプリケーションの要求に応える仕組みになっており，MPTCP
が下位層から TCP にみえるように MPQUIC は UDP に見えるのでセキュリティミドルボックスの突破に貢献します．
MPQUIC の論文&lt;sup id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt; はショートペーパーなので，より詳細なものがフルペーパーで読めるのを楽しみにしています．&lt;/p&gt;
&lt;h3 id=&#34;おわりに&#34;&gt;おわりに&lt;/h3&gt;
&lt;p&gt;長くなりすぎました．&lt;/p&gt;
&lt;p&gt;ですがひととおり読んでいただくと，マルチパス通信に共通なモデルとそれぞれの特徴が
ざっくりと把握できるのではないかと思います．やっぱりマルチパスは D-plane が難しいですね．
帯域を使い切るのは大変だ．&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;項目&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;SCTP&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;MPTCP&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;MPQUIC&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;コネクション&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;あり&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;あり&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;あり&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;転送指向&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;メッセージ&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;バイトストリーム&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;バイトストリーム&lt;sup id=&#34;fnref:11&#34;&gt;&lt;a href=&#34;#fn:11&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;11&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;マルチストリーム&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;標準機能&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;要拡張機能&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;標準機能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;帯域集約&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;要拡張機能&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;標準機能&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;標準機能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;耐障害性&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;標準機能&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;標準機能&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;標準機能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;マルチパス HoL Blocking&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;回避可能&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;不可避&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;回避可能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;階層&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;L4&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;L4 on TCP&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;L7 on UDP&lt;sup id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;こちらの意図を英訳すると Highly Functional Communication Paths になるのですが，直感的には Enhanced Communication Paths がわかりやすいです． &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;R. T. Braden, &amp;ldquo;Requirements for Internet Hosts - Communication Layers,&amp;rdquo; &lt;a href=&#34;https://tools.ietf.org/html/rfc1122&#34;&gt;RFC 1122&lt;/a&gt;, Oct. 1989. &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;R. R. Stewart, &amp;ldquo;Stream Control Transmission Protocol,&amp;rdquo; &lt;a href=&#34;https://tools.ietf.org/html/rfc4960&#34;&gt;RFC 4960&lt;/a&gt;, Sep. 2007. &lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;A. Ford, C. Raiciu, M. J. Handley, and O. Bonaventure, &amp;ldquo;TCP Extensions for Multipath Operation with Multiple Addresses,&amp;rdquo; &lt;a href=&#34;https://www.rfc-editor.org/rfc/rfc6824.txt&#34;&gt;RFC 6838&lt;/a&gt;, Jan. 2013. &lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:5&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Q. D. Coninck and O. Bonaventure, &amp;ldquo;Multipath QUIC: Design and Evaluation,&amp;rdquo; In Proc. of the 13th International Conference on Emerging Networking EXperiments and Technologies (CoNEXT&#39;17), pp. 160&amp;ndash;166, Incheon, Republic of Korea, Dec. 12&amp;ndash;15. 2017. &lt;a href=&#34;#fnref:5&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:6&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Prof. P. D. Amer, M. Becke, T. Dreibholz, N. Ekiz, J. Iyengar, P. Natarajan, R. R. Stewart, M. Tüxen, &amp;ldquo;Load Sharing for the Stream Control Transmission Protocol (SCTP),&amp;rdquo; &lt;a href=&#34;https://www.ietf.org/id/draft-tuexen-tsvwg-sctp-multipath-15.txt&#34;&gt;draft-tuexen-tsvwg-sctp-multipath-15.txt&lt;/a&gt;, Jan. 2018. &lt;a href=&#34;#fnref:6&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:7&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;src IP ごとにルーティングテーブルを設定したり，I/F を mptcp enabled にしたりする程度です．詳しくは &lt;sup id=&#34;fnref:8&#34;&gt;&lt;a href=&#34;#fn:8&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;8&lt;/a&gt;&lt;/sup&gt;を参照． &lt;a href=&#34;#fnref:7&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:8&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://multipath-tcp.org/pmwiki.php&#34;&gt;MultiPath TCP - Linux Kernel implementation&lt;/a&gt; &lt;a href=&#34;#fnref:8&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:9&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;B. Hesmans and O. Bonaventure, &amp;ldquo;An Enhanced Socket API for Multipath TCP,&amp;rdquo; In Proc. of the 2016 Applied Networking Research Workshop (ANRR&#39;16), pp. 1&amp;ndash;6, Berlin, Germany, Jul. 16. 2016. &lt;a href=&#34;#fnref:9&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:10&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Q. D. Coninck and O. Bonaventure, &amp;ldquo;Multipath Extension for QUIC,&amp;rdquo; &lt;a href=&#34;https://tools.ietf.org/html/draft-deconinck-multipath-quic-00&#34;&gt;draft-deconinck-multipath-quic-00&lt;/a&gt;, Oct. 2017. &lt;a href=&#34;#fnref:10&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:11&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;A. Langley, A. Riddoch, A. Wilk, A. Vicente, C. Krasic, D. Zhang, F. Yang, F. Kouranov, I. Swett, J. Iyengar, J. Bailey, J. Dorfman, J. Roskind, J. Kulik, P. Westin, R. Tenneti, R. Shade, R. Hamilton, V. Vasiliev, W. Chang, and Z. Shi, &amp;ldquo;The QUIC Transport Protocol: Design and Internet-Scale Deployment,&amp;rdquo; In Proc. of the Conference of the ACM Special Interest Group on Data Communication (SIGCOMM &amp;lsquo;17), pp. 183&amp;ndash;196, Los Angeles, CA, USA, Aug. 21&amp;ndash;25. 2017. &lt;a href=&#34;#fnref:11&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:12&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;R. Khalili, N. Gast, M. Popovic, U. Upadhyay, and J. L. Boudec, &amp;ldquo;MPTCP is not pareto-optimal: performance issues and a possible solution.&amp;rdquo; In Proc. of the 8th International Conference on Emerging Networking EXperiments and Technologies (CoNEXT &amp;lsquo;12), pp. 1&amp;ndash;12, Nice, France, Dec. 10&amp;ndash;13, 2012. &lt;a href=&#34;#fnref:12&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:13&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;D. Wischik, C. Raiciu, A. Greenhalgh, and M. Handley. 2011. &amp;ldquo;Design, Implementation and Evaluation of Congestion Control for Multipath TCP,&amp;rdquo; In NSDI &amp;lsquo;11. &lt;a href=&#34;#fnref:13&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
       </item>
       
       <item>
         <title>GitHub Pages &#43; Hugo で躓いた話</title>
         <link>https://negli0.github.io/posts/struggle-hugo/</link>
         <pubDate>Wed, 09 May 2018 00:32:25 +0900</pubDate>
         
         <guid>https://negli0.github.io/posts/struggle-hugo/</guid>
         <description>&lt;h2 id=&#34;うまくいかなかった話をしたい&#34;&gt;うまくいかなかった話をしたい&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://negli0.github.io/posts/start-hugo/&#34;&gt;前回エントリ(link)&lt;/a&gt;で &lt;em&gt;GitHub Pages + Hugo&lt;/em&gt; による HP
開設の話をしました．&lt;/p&gt;
&lt;p&gt;私は OSS を自分で設定したり動かしたりすることは好きなのですが，ドキュメント内の目的箇所
を特定するまでに時間がかかったり，大前提な部分を読み飛ばしたりなどのうっかりをやりがちです．&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;このエントリは，私が GitHub Pages と Hugo を使って HP を開設するまでに躓いたことたちを供養するためのものです．&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;私は&lt;!-- raw HTML omitted --&gt;&lt;em&gt;できるひとたちの途中でうまくいかなかった話&lt;/em&gt;&lt;!-- raw HTML omitted --&gt;
みたいなものに興味があるので，自分もなるべくそれらを残すようにしようと思っています．どんな人もしょうもないことで詰まったりするんだって話が聞けるとなんだかホッとするじゃないですか．俺ツエー話とは別で失敗エントリがあってもいいと思うんです．&lt;/p&gt;
&lt;h3 id=&#34;1-function-default-not-defined&#34;&gt;1. function &amp;ldquo;default&amp;rdquo; not defined&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt; function &amp;quot;default&amp;quot; not defined
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ローカル環境でサイトを生成して手元で確認するときに &lt;code&gt;hugo -wD server&lt;/code&gt; を実行しますが，その際に Hugo が吐く go のエラーです．
&lt;a href=&#34;https://gohugo.io/functions/default/&#34;&gt;ドキュメント&lt;/a&gt;を読むとわかるんですが，Hugo には &lt;code&gt;default&lt;/code&gt; という function が用意されています．
用意されているのに未定義だと怒られるということはおそらく当時パッケージマネージャで入れた Hugo のバージョンが低かったのでしょう．GitHub から Hugo の最新版をクローンして使ってみたら解決されました．&lt;/p&gt;
&lt;h4 id=&#34;a1-最新版の-hugo-を使用する&#34;&gt;A1. 最新版の Hugo を使用する&lt;/h4&gt;
&lt;hr&gt;
&lt;p&gt;&lt;code&gt;default&lt;/code&gt; の使い方は以下のように，&lt;code&gt;Params.seo_title&lt;/code&gt; に値が設定されていない場合はデフォルトである &lt;code&gt;.Title&lt;/code&gt; が title タグに使われるというふうです．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;title&lt;/span&gt;&amp;gt;{{ .&lt;span style=&#34;color:#a6e22e&#34;&gt;Params&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;seo_title&lt;/span&gt; | &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt; .&lt;span style=&#34;color:#a6e22e&#34;&gt;Title&lt;/span&gt; }}&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;title&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;他のサイトジェネレータでも同じことだと思いますが，Hugo はサイトやページのタイトルやタグなどを &lt;code&gt;Value&lt;/code&gt; として設定します．
ユーザが設定するサイトの baseurl やタイトルなどは &lt;code&gt;config.toml&lt;/code&gt; に設定します．&lt;/p&gt;
&lt;p&gt;また，テーマ側の layout 以下とトップディレクトリの &lt;code&gt;layout/&lt;/code&gt; 以下に同名ファイル（e.g., &lt;code&gt;header.html&lt;/code&gt;）が存在する場合はトップディレクトリの &lt;code&gt;layout/&lt;/code&gt; のファイルが優先（オーバーライド）されます．これを利用して既存テーマを改造することができます．&lt;/p&gt;
&lt;h3 id=&#34;2-公開ページ用のブランチを-gh-pages-にしたいできない&#34;&gt;2. 公開ページ用のブランチを &lt;code&gt;gh-pages&lt;/code&gt; にしたい（できない！）&lt;/h3&gt;
&lt;p&gt;研究室の HP でも Hugo を使っています．HP のソース（Hugo 的には &lt;code&gt;public/&lt;/code&gt; 以下）は &lt;code&gt;gh-pages&lt;/code&gt; というブランチで，そのソースを生成するためのファイル群は &lt;code&gt;master&lt;/code&gt; ブランチで，同一のレポジトリで管理しています．記事を書いて &lt;code&gt;master&lt;/code&gt; に push すると CircleCI によってサイトが生成され，それを &lt;code&gt;gh-pages&lt;/code&gt; に push してくれてページが更新されます．&lt;/p&gt;
&lt;p&gt;同様に，自分のサイトでもこのようなブランチの分離をしたくなりました．&lt;/p&gt;
&lt;p&gt;私の作業の流れは Hugo Document の Quick Start と Host on GitHub に基づいています．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/getting-started/quick-start/&#34;&gt;Quick Start | Hugo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/hosting-and-deployment/hosting-on-github/&#34;&gt;Host on Github | Hugo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ユーザに紐づく GitHub Pages のリポジトリに関して重要なのは以下の2点です．&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;リポジトリ名は &lt;code&gt;&amp;lt;USERNAME&amp;gt;.github.io&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;!-- raw HTML omitted --&gt;公開ページ用のブランチは &lt;code&gt;master&lt;/code&gt;&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;2 でハマりました．ドキュメントにしっかり書いてあるのに読み飛ばしたのでしょう．
研究室 HP と同様に &lt;code&gt;gh-pages&lt;/code&gt; ブランチを公開ページ用に使用できると&lt;strong&gt;勝手に思い込んで&lt;/strong&gt;いました．&lt;/p&gt;
&lt;p&gt;つまり，&lt;code&gt;master&lt;/code&gt; に生成元のファイル群を push して公開ページ用のブランチを変更しようとしました．
実際に公開ページ用のブランチを変更しようとするとグレーアウトされて変更できません．
&lt;figure class=&#34;center&#34;&gt;
    &lt;img src=&#34;https://negli0.github.io/img/github-pages.png&#34;/&gt; &lt;figcaption&gt;
            &lt;h4&gt;図1． master branch から変更不可&lt;/h4&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;h4 id=&#34;a2-ページ公開用には-usernamegithubio-の-markmaster-ブランチmarkを使う&#34;&gt;A2. ページ公開用には &lt;code&gt;&amp;lt;username&amp;gt;.github.io&lt;/code&gt; の &lt;!-- raw HTML omitted --&gt;&lt;code&gt;master&lt;/code&gt; ブランチ&lt;!-- raw HTML omitted --&gt;を使う&lt;/h4&gt;
&lt;hr&gt;
&lt;p&gt;この仕様をきちんと把握していなかったのでした．Hugo で記事を公開するより前に
ページのレイアウトを改造するとき，よくある手順は以下のとおりです．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ hugo new site ./site-name &lt;span style=&#34;color:#75715e&#34;&gt;# サイトを作成するファイル群の生成&lt;/span&gt;
$ cd ./site-name            
$ ls
archetypes/  config.toml  content/  data/  layouts/  static/  themes/
$ git init				
$ git add . &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;  git commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;initial commit&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# master に commit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;サイトの設定はこれ以降 commit していけば保存されますが，ブランチを新たに作成していないので，&lt;code&gt;master&lt;/code&gt; ブランチに &lt;code&gt;config.toml&lt;/code&gt; のような設定ファイルを追加してしまいます．
この状態で「レイアウトができた，記事書いて公開するぞ〜」と意気込んで push すると，&lt;strong&gt;めでたく図１のようになります&lt;/strong&gt;．&lt;/p&gt;
&lt;p&gt;これを回避するには，なんでもいいので開発用ブランチでも切っておけば良かったわけです．
手順は以下の通り．&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ hugo new site ./site-name &lt;span style=&#34;color:#75715e&#34;&gt;# サイトを作成するファイル群の生成&lt;/span&gt;
$ cd ./site-name            
$ ls
archetypes/  config.toml  content/  data/  layouts/  static/  themes/
$ git init				
$ git checkout -b dev		&lt;span style=&#34;color:#75715e&#34;&gt;# 開発用ブランチにチェックアウト&lt;/span&gt;
$ git add . &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;initial commit&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# dev に commit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;3-同一リポジトリ上で-public-以下だけ-master-ブランチで扱う&#34;&gt;3. 同一リポジトリ上で &lt;code&gt;public/&lt;/code&gt; 以下だけ &lt;code&gt;master&lt;/code&gt; ブランチで扱う&lt;/h3&gt;
&lt;p&gt;Hugo を使う上で，&lt;code&gt;config.toml&lt;/code&gt; などの設定ファイル群の commit 先として考えられるのは以下の 2 つです．&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;!-- raw HTML omitted --&gt;ページ公開用と同一リポジトリの &lt;code&gt;master&lt;/code&gt; 以外のブランチ&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;
&lt;li&gt;ページ公開用と別のリポジトリ&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Hugo 公式では１を採用しており，Git の機能である &lt;code&gt;git submodule&lt;/code&gt; で実現しています．
私も Hugo 公式のやり方に従いました．&lt;/p&gt;
&lt;h4 id=&#34;a3-git-submodule-で-public-以下を別プロジェクトとして管理できる&#34;&gt;A3. Git Submodule で public/ 以下を別プロジェクトとして管理できる&lt;/h4&gt;
&lt;hr&gt;
&lt;h4 id=&#34;git-submodule-とは&#34;&gt;git submodule とは&lt;/h4&gt;
&lt;p&gt;一旦話が Git submodule に逸れます．&lt;br&gt;
使用目的は公式ドキュメントから引用します．（公式最強）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;あるプロジェクトで作業をしているときに、プロジェクト内で別のプロジェクトを使わなければならなくなることがよくあります。サードパーティが開発しているライブラリや、自身が別途開発していて複数の親プロジェクトから利用しているライブラリなどがそれにあたります。こういったときに出てくるのが**「ふたつのプロジェクトはそれぞれ別のものとして管理したい。だけど、一方を他方の一部としても使いたい」という問題**です。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://git-scm.com/book/ja/v1/Git-%E3%81%AE%E3%81%95%E3%81%BE%E3%81%96%E3%81%BE%E3%81%AA%E3%83%84%E3%83%BC%E3%83%AB-%E3%82%B5%E3%83%96%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB&#34;&gt;Git - サブモジュール&lt;/a&gt; より&lt;/p&gt;
&lt;p&gt;Hugo + GitHub Pages の場合を考えると，&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;設定ファイルや記事の元となる md ファイル&lt;/li&gt;
&lt;li&gt;&lt;code&gt;punlic/&lt;/code&gt; 以下&lt;/li&gt;
&lt;li&gt;&lt;code&gt;themes/&lt;/code&gt; 以下&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;をそれぞれ別のプロジェクトとして管理したいわけです．実際，ほとんどの Hugo のテーマが GitHub で管理されているので，自サイトのテーマは submodle で管理するのが自然です．&lt;/p&gt;
&lt;p&gt;submodule の詳細については先の公式ドキュメントを，実際の操作や簡単な使い方はこちらの Qiita エントリがわかりやすいです．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/sotarok/items/0d525e568a6088f6f6bb&#34;&gt;Git submodule の基礎 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/kinpira/items/3309eb2e5a9a422199e9&#34;&gt;Git submoduleの押さえておきたい理解ポイントのまとめ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;今回のような Hugo + GitHub Pages の場合，&lt;code&gt;public/&lt;/code&gt; 以下をプロジェクトとして &lt;code&gt;&amp;lt;username&amp;gt;/&amp;lt;username&amp;gt;.github.io&lt;/code&gt; の &lt;code&gt;master&lt;/code&gt; ブランチに commit していけば良いわけです．&lt;/p&gt;
&lt;h3 id=&#34;結論&#34;&gt;結論&lt;/h3&gt;
&lt;p&gt;公式ドキュメントが最強なので思慮深く読むべし．
個人ユーザの場合，ページ公開用には &lt;code&gt;master&lt;/code&gt; ブランチしか許可されてないことをきちんと把握しておくべきでした．&lt;/p&gt;
</description>
       </item>
       
       <item>
         <title>Network × Research なブログを目指す</title>
         <link>https://negli0.github.io/posts/start-hugo/</link>
         <pubDate>Sun, 29 Apr 2018 00:24:46 +0900</pubDate>
         
         <guid>https://negli0.github.io/posts/start-hugo/</guid>
         <description>&lt;h2 id=&#34;hello-phd-cource&#34;&gt;Hello, Ph.D Cource&lt;/h2&gt;
&lt;p&gt;こんにちは，nelio です．&lt;br&gt;
後期博士課程に進学したので，自分の名前で売っていくことがこれまで以上に重要な気がします．&lt;/p&gt;
&lt;p&gt;ということで研究の合間を縫ってやっとのことで HP を作りました．&lt;/p&gt;
&lt;h2 id=&#34;hugo--github-pages-で-hp-作成&#34;&gt;Hugo + GitHub Pages で HP 作成&lt;/h2&gt;
&lt;p&gt;世の中は便利かつ多様で，自分のアウトプットを披露できる場がいろいろありますね．
CS 分野で R&amp;amp;D（特に R）をしている身なので，以前から自分の研究の話とか実験の話とかを
外に出したら面白いんじゃないかと思っていました．&lt;em&gt;Hugo +  GitHub Pages&lt;/em&gt; を選択した
決め手は次のとおりです．&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;クラウドホストしたい（できれば無料で）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;極力コンテンツだけ書きたい&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CLI ベースで書きたい&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ちょっとしたカスタマイズ性がある&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以下，順次説明します．&lt;/p&gt;
&lt;h4 id=&#34;1-クラウドホストしたいできれば無料で&#34;&gt;1. クラウドホストしたい（できれば無料で）&lt;/h4&gt;
&lt;p&gt;メンテナンスにあまり手間と費用を掛けたくなかったことが大きな理由です．
私の所属する研究室では，以前はオンプレで WEB ページを運営していました．あたりまえですがサービス
そのものだけでなく，システム側の運営保守も必要です．ネットワークが専門なので
インフラの運用保守技術も身につけておく必要はあるのですが，結局はやる人間が限られて，それで摩耗して研究がおろそかになるというのは本末転倒です．&lt;del&gt;（引き継ぎが下手なだけでは）&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;結局研究室の HP は GitHub Pages にてサービスだけメンテナンスしようということになりました．
そこで一度経験したこともあって自分の HP も GitHub Pages にホストしたくなりました．
ドメインもデフォルトで困らないのでそのままです．&lt;/p&gt;
&lt;h4 id=&#34;2-極力コンテンツだけ書きたい&#34;&gt;2. 極力コンテンツだけ書きたい&lt;/h4&gt;
&lt;p&gt;フロントエンドに疎いので，デザインとかは既存のものをちょちょっと触ってかゆいところに手が届くようにすれば十分でした．
フロントエンドは移り変わりが激しい印象があって，今必死で覚えてもすぐに次のいいモノが出てきそうです．
フロントエンドをガッツリやる気力も出なかったので，GitHub Pages と相性のいいサイトジェネレータを使えると嬉しかった．&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://jekyllrb-ja.github.io&#34;&gt;Jekyll&lt;/a&gt; でも良かったんですが，Golang のほうが親しいのと，研究室 HP でも使っているので &lt;a href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt; にしました.&lt;/p&gt;
&lt;h4 id=&#34;3-cli-ベースで書きたい&#34;&gt;3. CLI ベースで書きたい&lt;/h4&gt;
&lt;p&gt;CLI というより，普段使っているエディタ（nvim）を使うほうが書きやすいかなという判断です．このあたりは GitHub Pages を使うと決めた理由の一部でもあります．時間がないときはコンテンツの下書きだけして &lt;code&gt;dev branch&lt;/code&gt; に push しておき，完成したら &lt;code&gt;master branch&lt;/code&gt; に反映するやりかたをしています．&lt;/p&gt;
&lt;h4 id=&#34;4-ちょっとしたカスタマイズ性がある&#34;&gt;4. ちょっとしたカスタマイズ性がある&lt;/h4&gt;
&lt;p&gt;これが地味に重要でした．おそらく私のように&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;イチからデザインを考えるのは難しいが，気に入ったテーマを自分好みに改造はしたい&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;みたいな人は多いんじゃないでしょうか．私は &lt;a href=&#34;https://themes.gohugo.io/hugo-kiera/&#34;&gt;Kiera&lt;/a&gt; というテーマを選択しました．
派手すぎず質素すぎないところが GOOD です．これに SNS シェアボタンや HTML の &lt;code&gt;meta tag&lt;/code&gt; をいじったり，記事にカテゴリーやタグをつけられるようにしました．あとは関連記事を表示したり Google Analytics と連携させたりツイートを埋め込んだりしたいです．&lt;/p&gt;
&lt;p&gt;テーマ自体も GitHub で管理されているので &lt;code&gt;git submodule&lt;/code&gt; 機能を使って更新を確認します．&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;目標ネットワーク--リサーチな話を面白く書く&#34;&gt;目標：ネットワーク ✕ リサーチな話を面白く書く&lt;/h2&gt;
&lt;h3 id=&#34;世の中おもしろいエンジニアリングブログはいっぱいある&#34;&gt;世の中おもしろいエンジニアリングブログはいっぱいある&lt;/h3&gt;
&lt;p&gt;この HP は，私が日々のインプットを「せっかくだから見えるところに置こう」という名目で開始しました．内容は IT 系のエンジニアリングの話がほとんどだと思いますが，ぶっちゃけすでに面白いブログはいっぱいありますよね．それに今の私にはエンジニアとして出せるものは少なく，純粋なエンジニアリング話を私が書く意味はあまりなさそうだなとか長いこと思っていました．&lt;/p&gt;
&lt;h3 id=&#34;ネットワーク--リサーチな記事&#34;&gt;ネットワーク × リサーチな記事&lt;/h3&gt;
&lt;p&gt;ではどうするのかといえば，エンジニアリングではなく&lt;strong&gt;リサーチ寄り&lt;/strong&gt;の話題を多めに書いてみようかなと思います．ネット上でよく目にする &lt;code&gt;XXX&lt;/code&gt; を作りました！みたいな開発系エントリ，読んでて楽しいですよね．一方で私も研究者なのでリサーチな話を気軽に見たいんですが，あまりアカデミアな話って日本語記事で見ないんですよね．&lt;/p&gt;
&lt;p&gt;加えてアカデミアかはさておき，高レイヤでサービスなアプリケーションの話はよく見かけます．人口が多いことに比例して目に入る機会が多いことに起因しているのでしょうか．一方で低レイヤでカーネルなシステムの話は最近流行っているのか，しばしば Twitter でも見かけます．ところが&lt;strong&gt;ネットワークそのもの&lt;/strong&gt;な話ってあまり見ないんですよね．（システム内のチューニングとか実装寄りな話はたまに見かけます）&lt;/p&gt;
&lt;p&gt;ということで，自身の専門がネットワークでしかもアカデミックな研究をしているので，自分の研究だけではなくぶっとんだ論文とか研究とかを紹介したいです．まずはちょっとだけ期待してください．修士課程から数えると3年目ですが，**&lt;!-- raw HTML omitted --&gt;研究の世界がこんなにも自由だ！&lt;!-- raw HTML omitted --&gt;**ということを伝えられたらいいな．&lt;/p&gt;
&lt;h3 id=&#34;一番伝えたいこと&#34;&gt;一番伝えたいこと&lt;/h3&gt;
&lt;p&gt;この HP がきっかけでネットワークが面白いと思ってくれる人が増えたら最高です．（あわよくばリサーチャー仲間に！）&lt;/p&gt;
</description>
       </item>
       
     </channel>
   </rss>
